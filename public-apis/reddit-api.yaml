openapi: 3.0.2
info:
  title: Reddit API
  version: TODO
  description: >-
    An OpenAPIv3 schema for Reddit's public API endpoints, automatically
    generated from Reddit's automatically generated API documentation.
  contact:
    url: 'https://github.com/danopia/various-openapi-schemas'
servers:
  - url: 'https://oauth.reddit.com'
    description: Accepts authenticated requests that contain a bearer token.
  - url: 'https://www.reddit.com'
    description: Accepts authentication flow (and anonymous) requests.
components:
  securitySchemes:
    redditOAuth:
      type: oauth2
      description: 'https://github.com/reddit-archive/reddit/wiki/OAuth2'
      flows:
        authorizationCode:
          authorizationUrl: 'https://www.reddit.com/api/v1/authorize'
          tokenUrl: 'https://www.reddit.com/api/v1/access_token'
          scopes: &ref_0
            creddits: Spend my reddit gold creddits on giving gold to other users.
            modnote: Access mod notes for subreddits I moderate.
            modcontributors: >-
              Add/remove users to approved user lists and ban/unban or
              mute/unmute users from subreddits I moderate.
            modmail: Access and manage modmail via mod.reddit.com.
            modconfig: >-
              Manage the configuration, sidebar, and CSS of subreddits I
              moderate.
            subscribe: >-
              Manage my subreddit subscriptions. Manage "friends" - users whose
              content I follow.
            structuredstyles: Edit structured styles for a subreddit I moderate.
            vote: Submit and change my votes on comments and submissions.
            wikiedit: Edit wiki pages on my behalf
            mysubreddits: >-
              Access the list of subreddits I moderate, contribute to, and
              subscribe to.
            submit: Submit links and comments from my account.
            modlog: Access the moderation log in subreddits I moderate.
            modposts: >-
              Approve, remove, mark nsfw, and distinguish content in subreddits
              I moderate.
            modflair: Manage and assign flair in subreddits I moderate.
            save: Save and unsave comments and submissions.
            modothers: Invite or remove other moderators from subreddits I moderate.
            read: Access posts and comments through my account.
            privatemessages: Access my inbox and send private messages to other users.
            report: >-
              Report content for rules violations. Hide &amp; show individual
              submissions.
            identity: Access my reddit username and signup date.
            livemanage: Manage settings and contributors of live threads I contribute to.
            account: >-
              Update preferences and related account information. Will not have
              access to your email or password.
            modtraffic: Access traffic stats in subreddits I moderate.
            wikiread: Read wiki pages through my account
            edit: Edit and delete my comments and submissions.
            modwiki: >-
              Change editors and visibility of wiki pages in subreddits I
              moderate.
            modself: >-
              Accept invitations to moderate a subreddit. Remove myself as a
              moderator or contributor of subreddits I moderate or contribute
              to.
            history: >-
              Access my voting history and comments or submissions I've saved or
              hidden.
            flair: Select my subreddit flair. Change link flair on my submissions.
        implicit:
          authorizationUrl: 'https://www.reddit.com/api/v1/authorize'
          scopes: *ref_0
    oauthClientSecret:
      type: http
      scheme: basic
tags:
  - name: account
  - name: captcha
  - name: collections
  - name: emoji
  - name: flair
  - name: reddit gold
  - name: links & comments
  - name: listings
  - name: live threads
    description: >-
      Real-time updates on reddit. 

      In addition to the standard reddit API, WebSockets play a huge role in
      reddit live. Receiving push notification of changes to the thread via
      websockets is much better than polling the thread repeatedly. 

      To connect to the websocket server, fetch /live/thread/about.json and get
      the websocket_url field. The websocket URL expires after a period of time;
      if it does, fetch a new one from that endpoint. 

      Once connected to the socket, a variety of messages can come in. All
      messages will be in text frames containing a JSON object with two keys:
      type and payload. Live threads can send messages with many types: 
       
      update - a new update has been posted in the thread. the payload contains
      the JSON representation of the update. 

      activity - periodic update of the viewer counts for the thread. 

      settings - the thread's settings have changed. the payload is an object
      with each key being a property of the thread (as in about.json) and its
      new value. 

      delete - an update has been deleted (removed from the thread). the payload
      is the ID of the deleted update. 

      strike - an update has been stricken (marked incorrect and crossed out).
      the payload is the ID of the stricken update. 

      embeds_ready - a previously posted update has been parsed and embedded
      media is available for it now. the payload contains a liveupdate_id and
      list of embeds to add to it. 

      complete - the thread has been marked complete. no further updates will be
      sent.  

      See /r/live for more information.  
  - name: private messages
  - name: misc
  - name: moderation
  - name: new modmail
  - name: modnote
  - name: multis
  - name: search
  - name: subreddits
  - name: users
  - name: widgets
  - name: wiki
paths:
  /api/v1/access_token:
    post:
      operationId: POST_api_v1_access_token
      summary: Complete an OAuth flow to receive a bearer token
      servers:
        - url: 'https://www.reddit.com'
          description: Accepts authentication requests.
      externalDocs:
        url: 'https://github.com/reddit-archive/reddit/wiki/OAuth2'
      security:
        - oauthClientSecret: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum:
                    - authorization_code
                    - refresh_token
                    - client_credentials
                    - 'https://oauth.reddit.com/grants/installed_client'
                code:
                  type: string
                  description: Required for grant_type=authorization_code
                redirect_uri:
                  type: string
                  description: Required for grant_type=authorization_code
                refresh_token:
                  type: string
                  description: Required for grant_type=refresh_token
                device_id:
                  type: string
                  description: Optional for grant_type=.../installed_client
      responses:
        '200':
          description: Contains an access token for use in future API calls
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    enum:
                      - bearer
                  expires_in:
                    type: integer
                  scope:
                    type: string
                  refresh_token:
                    type: string
                required:
                  - access_token
                  - token_type
                  - expires_in
                  - scope
        '401':
          description: Client credentials sent as HTTP Basic Authorization were invalid
  /api/v1/revoke_token:
    post:
      operationId: POST_api_v1_revoke_token
      summary: Revokes a bearer token so that it cannot be used anymore
      servers:
        - url: 'https://www.reddit.com'
          description: Accepts authentication requests.
      externalDocs:
        url: >-
          https://github.com/reddit-archive/reddit/wiki/OAuth2#manually-revoking-a-token
      security:
        - oauthClientSecret: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                token_type_hint:
                  type: string
                  enum:
                    - access_token
                    - refresh_token
      responses:
        '204':
          description: It worked
        '401':
          description: Client credentials sent as HTTP Basic Authorization were invalid
  /api/v1/me.json:
    get:
      operationId: GET_api_v1_me
      security:
        - redditOAuth:
            - identity
      description: Returns the identity of the user.
      tags:
        - account
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /api/v1/me/karma.json:
    get:
      operationId: GET_api_v1_me_karma
      security:
        - redditOAuth:
            - mysubreddits
      description: Return a breakdown of subreddit karma.
      tags:
        - account
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /api/v1/me/prefs.json:
    get:
      operationId: GET_api_v1_me_prefs
      security:
        - redditOAuth:
            - identity
      description: Return the preference settings of the logged in user
      tags:
        - account
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: fields
          in: query
          description: |-
            A comma-separated list of items from this set: 
            beta
             threaded_messages
             hide_downs
             nightmode
             third_party_site_data_personalized_ads
             activity_relevant_ads
             show_stylesheets
             profile_opt_out
             bad_comment_autocollapse
             third_party_site_data_personalized_content
             show_link_flair
             creddit_autorenew
             show_trending
             top_karma_subreddits
             country_code
             theme_selector
             monitor_mentions
             email_comment_reply
             research
             email_new_user_welcome
             ignore_suggested_sort
             show_presence
             email_upvote_comment
             email_digests
             private_feeds
             num_comments
             feed_recommendations_enabled
             clickgadget
             use_global_defaults
             label_nsfw
             domain_details
             email_messages
             live_orangereds
             highlight_controversial
             mark_messages_read
             no_profanity
             email_unsubscribe_all
             lang
             in_redesign_beta
             live_bar_recommendations_enabled
             third_party_data_personalized_ads
             email_chat_request
             allow_clicktracking
             hide_from_robots
             show_gold_expiration
             show_twitter
             compress
             store_visits
             video_autoplay
             email_upvote_post
             email_username_mention
             other_theme
             media_preview
             email_user_new_follower
             hide_ups
             enable_default_themes
             geopopular
             organic
             survey_last_seen_time
             threaded_modmail
             enable_followers
             show_promote
             min_comment_score
             public_votes
             show_location_based_recommendations
             email_post_reply
             collapse_read_messages
             show_flair
             send_crosspost_messages
             search_include_over_18
             hide_ads
             third_party_personalized_ads
             min_link_score
             over_18
             newwindow
             numsites
             media
             legacy_search
             email_private_message
             send_welcome_messages
             email_community_discovery
             highlight_new_comments
             default_comment_sort
             accept_pms
    patch:
      operationId: PATCH_api_v1_me_prefs
      security:
        - redditOAuth:
            - account
      description: ''
      tags:
        - account
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
              description: >-
                { "accept_pms": one of (`everyone`, `whitelisted`),
                "activity_relevant_ads": boolean value, "allow_clicktracking":
                boolean value, "bad_comment_autocollapse": one of (`off`, `low`,
                `medium`, `high`), "beta": boolean value, "clickgadget": boolean
                value, "collapse_read_messages": boolean value, "compress":
                boolean value, "country_code": one of (`WF`, `JP`, `JM`, `JO`,
                `WS`, `JE`, `GW`, `GU`, `GT`, `GS`, `GR`, `GQ`, `GP`, `GY`,
                `GG`, `GF`, `GE`, `GD`, `GB`, `GA`, `GN`, `GM`, `GL`, `GI`,
                `GH`, `PR`, `PS`, `PW`, `PT`, `PY`, `PA`, `PF`, `PG`, `PE`,
                `PK`, `PH`, `PN`, `PL`, `PM`, `ZM`, `ZA`, `ZZ`, `ZW`, `ME`,
                `MD`, `MG`, `MF`, `MA`, `MC`, `MM`, `ML`, `MO`, `MN`, `MH`,
                `MK`, `MU`, `MT`, `MW`, `MV`, `MQ`, `MP`, `MS`, `MR`, `MY`,
                `MX`, `MZ`, `FR`, `FI`, `FJ`, `FK`, `FM`, `FO`, `CK`, `CI`,
                `CH`, `CO`, `CN`, `CM`, `CL`, `CC`, `CA`, `CG`, `CF`, `CD`,
                `CZ`, `CY`, `CX`, `CR`, `CW`, `CV`, `CU`, `SZ`, `SY`, `SX`,
                `SS`, `SR`, `SV`, `ST`, `SK`, `SJ`, `SI`, `SH`, `SO`, `SN`,
                `SM`, `SL`, `SC`, `SB`, `SA`, `SG`, `SE`, `SD`, `YE`, `YT`,
                `LB`, `LC`, `LA`, `LK`, `LI`, `LV`, `LT`, `LU`, `LR`, `LS`,
                `LY`, `VA`, `VC`, `VE`, `VG`, `IQ`, `VI`, `IS`, `IR`, `IT`,
                `VN`, `IM`, `IL`, `IO`, `IN`, `IE`, `ID`, `BD`, `BE`, `BF`,
                `BG`, `BA`, `BB`, `BL`, `BM`, `BN`, `BO`, `BH`, `BI`, `BJ`,
                `BT`, `BV`, `BW`, `BQ`, `BR`, `BS`, `BY`, `BZ`, `RU`, `RW`,
                `RS`, `RE`, `RO`, `OM`, `HR`, `HT`, `HU`, `HK`, `HN`, `HM`,
                `EH`, `EE`, `EG`, `EC`, `ET`, `ES`, `ER`, `UY`, `UZ`, `US`,
                `UM`, `UG`, `UA`, `VU`, `NI`, `NL`, `NO`, `NA`, `NC`, `NE`,
                `NF`, `NG`, `NZ`, `NP`, `NR`, `NU`, `XK`, `XZ`, `XX`, `KG`,
                `KE`, `KI`, `KH`, `KN`, `KM`, `KR`, `KP`, `KW`, `KZ`, `KY`,
                `DO`, `DM`, `DJ`, `DK`, `DE`, `DZ`, `TZ`, `TV`, `TW`, `TT`,
                `TR`, `TN`, `TO`, `TL`, `TM`, `TJ`, `TK`, `TH`, `TF`, `TG`,
                `TD`, `TC`, `AE`, `AD`, `AG`, `AF`, `AI`, `AM`, `AL`, `AO`,
                `AN`, `AQ`, `AS`, `AR`, `AU`, `AT`, `AW`, `AX`, `AZ`, `QA`),
                "creddit_autorenew": boolean value, "default_comment_sort": one
                of (`confidence`, `top`, `new`, `controversial`, `old`,
                `random`, `qa`, `live`), "domain_details": boolean value,
                "email_chat_request": boolean value, "email_comment_reply":
                boolean value, "email_community_discovery": boolean value,
                "email_digests": boolean value, "email_messages": boolean value,
                "email_new_user_welcome": boolean value, "email_post_reply":
                boolean value, "email_private_message": boolean value,
                "email_unsubscribe_all": boolean value, "email_upvote_comment":
                boolean value, "email_upvote_post": boolean value,
                "email_user_new_follower": boolean value,
                "email_username_mention": boolean value,
                "enable_default_themes": boolean value, "enable_followers":
                boolean value, "feed_recommendations_enabled": boolean value,
                "g": one of (`GLOBAL`, `US`, `AR`, `AU`, `BG`, `CA`, `CL`, `CO`,
                `HR`, `CZ`, `FI`, `FR`, `DE`, `GR`, `HU`, `IS`, `IN`, `IE`,
                `IT`, `JP`, `MY`, `MX`, `NZ`, `PH`, `PL`, `PT`, `PR`, `RO`,
                `RS`, `SG`, `ES`, `SE`, `TW`, `TH`, `TR`, `GB`, `US_WA`,
                `US_DE`, `US_DC`, `US_WI`, `US_WV`, `US_HI`, `US_FL`, `US_WY`,
                `US_NH`, `US_NJ`, `US_NM`, `US_TX`, `US_LA`, `US_NC`, `US_ND`,
                `US_NE`, `US_TN`, `US_NY`, `US_PA`, `US_CA`, `US_NV`, `US_VA`,
                `US_CO`, `US_AK`, `US_AL`, `US_AR`, `US_VT`, `US_IL`, `US_GA`,
                `US_IN`, `US_IA`, `US_OK`, `US_AZ`, `US_ID`, `US_CT`, `US_ME`,
                `US_MD`, `US_MA`, `US_OH`, `US_UT`, `US_MO`, `US_MN`, `US_MI`,
                `US_RI`, `US_KS`, `US_MT`, `US_MS`, `US_SC`, `US_KY`, `US_OR`,
                `US_SD`), "hide_ads": boolean value, "hide_downs": boolean
                value, "hide_from_robots": boolean value, "hide_ups": boolean
                value, "highlight_controversial": boolean value,
                "highlight_new_comments": boolean value,
                "ignore_suggested_sort": boolean value, "in_redesign_beta":
                boolean value, "label_nsfw": boolean value, "lang": a valid IETF
                language tag (underscore separated), "legacy_search": boolean
                value, "live_bar_recommendations_enabled": boolean value,
                "live_orangereds": boolean value, "mark_messages_read": boolean
                value, "media": one of (`on`, `off`, `subreddit`),
                "media_preview": one of (`on`, `off`, `subreddit`),
                "min_comment_score": an integer between -100 and 100,
                "min_link_score": an integer between -100 and 100,
                "monitor_mentions": boolean value, "newwindow": boolean value,
                "nightmode": boolean value, "no_profanity": boolean value,
                "num_comments": an integer between 1 and 500, "numsites": an
                integer between 1 and 100, "organic": boolean value,
                "other_theme": subreddit name, "over_18": boolean value,
                "private_feeds": boolean value, "profile_opt_out": boolean
                value, "public_votes": boolean value, "research": boolean value,
                "search_include_over_18": boolean value,
                "send_crosspost_messages": boolean value,
                "send_welcome_messages": boolean value, "show_flair": boolean
                value, "show_gold_expiration": boolean value, "show_link_flair":
                boolean value, "show_location_based_recommendations": boolean
                value, "show_presence": boolean value, "show_promote": boolean
                value, "show_stylesheets": boolean value, "show_trending":
                boolean value, "show_twitter": boolean value, "store_visits":
                boolean value, "survey_last_seen_time": an integer,
                "theme_selector": subreddit name,
                "third_party_data_personalized_ads": boolean value,
                "third_party_personalized_ads": boolean value,
                "third_party_site_data_personalized_ads": boolean value,
                "third_party_site_data_personalized_content": boolean value,
                "threaded_messages": boolean value, "threaded_modmail": boolean
                value, "top_karma_subreddits": boolean value,
                "use_global_defaults": boolean value, "video_autoplay": boolean
                value, }
  /api/v1/me/trophies.json:
    get:
      operationId: GET_api_v1_me_trophies
      security:
        - redditOAuth:
            - identity
      description: Return a list of trophies for the current user.
      tags:
        - account
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /prefs/friends.json:
    get:
      operationId: GET_prefs_friends
      security: &ref_1
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags: &ref_2
        - account
      responses: &ref_3
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - &ref_4
          name: after
          in: query
          description: fullname of a thing
        - &ref_5
          name: before
          in: query
          description: fullname of a thing
        - &ref_6
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_7
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_8
          name: show
          in: query
          description: (optional) the string all
        - &ref_9
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  /prefs/blocked.json:
    get:
      operationId: GET_prefs_blocked
      security: *ref_1
      description: This endpoint is a listing.
      tags: *ref_2
      responses: *ref_3
      parameters:
        - *ref_4
        - *ref_5
        - *ref_6
        - *ref_7
        - *ref_8
        - *ref_9
  /prefs/messaging.json:
    get:
      operationId: GET_prefs_messaging
      security: *ref_1
      description: This endpoint is a listing.
      tags: *ref_2
      responses: *ref_3
      parameters:
        - *ref_4
        - *ref_5
        - *ref_6
        - *ref_7
        - *ref_8
        - *ref_9
  /prefs/trusted.json:
    get:
      operationId: GET_prefs_trusted
      security: *ref_1
      description: This endpoint is a listing.
      tags: *ref_2
      responses: *ref_3
      parameters:
        - *ref_4
        - *ref_5
        - *ref_6
        - *ref_7
        - *ref_8
        - *ref_9
  /api/v1/me/friends.json:
    get:
      operationId: GET_api_v1_me_friends
      security: *ref_1
      description: This endpoint is a listing.
      tags: *ref_2
      responses: *ref_3
      parameters:
        - *ref_4
        - *ref_5
        - *ref_6
        - *ref_7
        - *ref_8
        - *ref_9
  /api/v1/me/blocked.json:
    get:
      operationId: GET_api_v1_me_blocked
      security: *ref_1
      description: This endpoint is a listing.
      tags: *ref_2
      responses: *ref_3
      parameters:
        - *ref_4
        - *ref_5
        - *ref_6
        - *ref_7
        - *ref_8
        - *ref_9
  /api/needs_captcha.json:
    get:
      operationId: GET_api_needs_captcha
      security:
        - redditOAuth:
            - any
      description: Check whether ReCAPTCHAs are needed for API methods
      tags:
        - captcha
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /api/v1/collections/add_post_to_collection.json:
    post:
      operationId: POST_api_v1_collections_add_post_to_collection
      security:
        - redditOAuth:
            - modposts
      description: Add a post to a collection
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: link_fullname
          in: query
          description: a fullname of a link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/collection.json:
    get:
      operationId: GET_api_v1_collections_collection
      security:
        - redditOAuth:
            - read
      description: Fetch a collection including all the links
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: include_links
          in: query
          description: boolean value
  /api/v1/collections/create_collection.json:
    post:
      operationId: POST_api_v1_collections_create_collection
      security:
        - redditOAuth:
            - modposts
      description: Create a collection
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: description
          in: query
          description: a string no longer than 500 characters
        - name: display_layout
          in: query
          description: 'one of (TIMELINE, GALLERY)'
        - name: sr_fullname
          in: query
          description: a fullname of a subreddit
        - name: title
          in: query
          description: title of the submission. up to 300 characters long
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/delete_collection.json:
    post:
      operationId: POST_api_v1_collections_delete_collection
      security:
        - redditOAuth:
            - modposts
      description: Delete a collection
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/follow_collection.json:
    post:
      operationId: POST_api_v1_collections_follow_collection
      security:
        - redditOAuth:
            - subscribe
      description: >-
        Follow or unfollow a collection 

        To follow, follow should be True. To unfollow, follow should be False.
        The user must have access to the subreddit to be able to follow a
        collection within it.
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: follow
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/remove_post_in_collection.json:
    post:
      operationId: POST_api_v1_collections_remove_post_in_collection
      security:
        - redditOAuth:
            - modposts
      description: Remove a post from a collection
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: link_fullname
          in: query
          description: a fullname of a link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/reorder_collection.json:
    post:
      operationId: POST_api_v1_collections_reorder_collection
      security:
        - redditOAuth:
            - modposts
      description: Reorder posts in a collection
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: link_ids
          in: query
          description: the list of comma seperated link_ids in the order to set them in
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/subreddit_collections.json:
    get:
      operationId: GET_api_v1_collections_subreddit_collections
      security:
        - redditOAuth:
            - read
      description: Fetch collections for the subreddit
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: sr_fullname
          in: query
          description: a fullname of a subreddit
  /api/v1/collections/update_collection_description.json:
    post:
      operationId: POST_api_v1_collections_update_collection_description
      security:
        - redditOAuth:
            - modposts
      description: Update a collection's description
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: description
          in: query
          description: a string no longer than 500 characters
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/update_collection_display_layout.json:
    post:
      operationId: POST_api_v1_collections_update_collection_display_layout
      security:
        - redditOAuth:
            - modposts
      description: Update a collection's display layout
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: display_layout
          in: query
          description: 'one of (TIMELINE, GALLERY)'
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/v1/collections/update_collection_title.json:
    post:
      operationId: POST_api_v1_collections_update_collection_title
      security:
        - redditOAuth:
            - modposts
      description: Update a collection's title
      tags:
        - collections
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: collection_id
          in: query
          description: the UUID of a collection
        - name: title
          in: query
          description: title of the submission. up to 300 characters long
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/api/v1/{subreddit}/emoji.json':
    post:
      operationId: 'POST_api_v1_{subreddit}_emoji.json'
      security:
        - redditOAuth:
            - structuredstyles
      description: >-
        Add an emoji to the DB by posting a message on emoji_upload_q. A job
        processor that listens on a queue, uses the s3_key provided in the
        request to locate the image in S3 Temp Bucket and moves it to the PERM
        bucket. It also adds it to the DB using name as the column and
        sr_fullname as the key and sends the status on the websocket URL that is
        provided as part of this response. 

        This endpoint should also be used to update custom subreddit emojis with
        new images. If only the permissions on an emoji require updating the
        POST_emoji_permissions endpoint should be requested, instead.
      tags:
        - emoji
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: mod_flair_only
          in: query
          description: boolean value
        - name: name
          in: query
          description: >-
            Name of the emoji to be created. It can be alphanumeric without any
            special characters except '-' & '_' and cannot exceed 24 characters.
        - name: post_flair_allowed
          in: query
          description: boolean value
        - name: s3_key
          in: query
          description: >-
            S3 key of the uploaded image which can be obtained from the S3 url.
            This is of the form subreddit/hash_value.
        - name: user_flair_allowed
          in: query
          description: boolean value
        - in: path
          name: subreddit
          schema:
            type: string
  '/api/v1/{subreddit}/emoji/{emoji_name}.json':
    delete:
      operationId: 'DELETE_api_v1_{subreddit}_emoji_{emoji_name}'
      security:
        - redditOAuth:
            - structuredstyles
      description: >-
        Delete a Subreddit emoji. Remove the emoji from Cassandra and purge the
        assets from S3 and the image resizing provider.
      tags:
        - emoji
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: emoji_name
          schema:
            type: string
  '/api/v1/{subreddit}/emoji_asset_upload_s3.json':
    post:
      operationId: 'POST_api_v1_{subreddit}_emoji_asset_upload_s3.json'
      security:
        - redditOAuth:
            - structuredstyles
      description: >-
        Acquire and return an upload lease to s3 temp bucket. The return value
        of this function is a json object containing credentials for uploading
        assets to S3 bucket, S3 url for upload request and the key to use for
        uploading. Using this lease the client will upload the emoji image to S3
        temp bucket (included as part of the S3 URL). 

        This lease is used by S3 to verify that the upload is authorized.
      tags:
        - emoji
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: filepath
          in: query
          description: name and extension of the image file e.g. image1.png
        - name: mimetype
          in: query
          description: mime type of the image e.g. image/png
        - in: path
          name: subreddit
          schema:
            type: string
  '/api/v1/{subreddit}/emoji_custom_size.json':
    post:
      operationId: 'POST_api_v1_{subreddit}_emoji_custom_size'
      security:
        - redditOAuth:
            - structuredstyles
      description: |-
        Set custom emoji size. 
        Omitting width or height will disable custom emoji sizing.
      tags:
        - emoji
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: height
          in: query
          description: 'an integer between 1 and 40 (default: 0)'
        - name: width
          in: query
          description: 'an integer between 1 and 40 (default: 0)'
        - in: path
          name: subreddit
          schema:
            type: string
  '/api/v1/{subreddit}/emojis/all.json':
    get:
      operationId: 'GET_api_v1_{subreddit}_emojis_all'
      security:
        - redditOAuth:
            - read
      description: >-
        Get all emojis for a SR. The response inclueds snoomojis as well as
        emojis for the SR specified in the request. 

        The response has 2 keys: - snoomojis - SR emojis
      tags:
        - emoji
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/clearflairtemplates.json':
    post:
      operationId: POST_api_clearflairtemplates
      security:
        - redditOAuth:
            - modflair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: flair_type
          in: query
          description: 'one of (USER_FLAIR, LINK_FLAIR)'
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/deleteflair.json':
    post:
      operationId: POST_api_deleteflair
      security:
        - redditOAuth:
            - modflair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: name
          in: query
          description: a user by name
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/deleteflairtemplate.json':
    post:
      operationId: POST_api_deleteflairtemplate
      security:
        - redditOAuth:
            - modflair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: flair_template_id
          in: query
          description: ''
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flair.json':
    post:
      operationId: POST_api_flair
      security:
        - redditOAuth:
            - modflair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: css_class
          in: query
          description: a valid subreddit image name
        - name: link
          in: query
          description: a fullname of a link
        - name: name
          in: query
          description: a user by name
        - name: text
          in: query
          description: a string no longer than 64 characters
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flair_template_order.json':
    patch:
      operationId: PATCH_api_flair_template_order
      security:
        - redditOAuth:
            - modflair
      description: >-
        Update the order of flair templates in the specified subreddit. 

        Order should contain every single flair id for that flair type; omitting
        any id will result in a loss of data.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: flair_type
          in: query
          description: 'one of (USER_FLAIR, LINK_FLAIR)'
        - name: subreddit
          in: query
          description: subreddit name
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flairconfig.json':
    post:
      operationId: POST_api_flairconfig
      security:
        - redditOAuth:
            - modflair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: flair_enabled
          in: query
          description: boolean value
        - name: flair_position
          in: query
          description: 'one of (left, right)'
        - name: flair_self_assign_enabled
          in: query
          description: boolean value
        - name: link_flair_position
          in: query
          description: 'one of (`,left,right`)'
        - name: link_flair_self_assign_enabled
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flaircsv.json':
    post:
      operationId: POST_api_flaircsv
      security:
        - redditOAuth:
            - modflair
      description: >-
        Change the flair of multiple users in the same subreddit with a single
        API call. 

        Requires a string 'flair_csv' which has up to 100 lines of the form
        'user,flairtext,cssclass' (Lines beyond the 100th are ignored). 

        If both cssclass and flairtext are the empty string for a given user,
        instead clears that user's flair. 

        Returns an array of objects indicating if each flair setting was
        applied, or a reason for the failure.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: flair_csv
          in: query
          description: comma-seperated flair information
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flairlist.json':
    get:
      operationId: GET_api_flairlist
      security:
        - redditOAuth:
            - modflair
      description: This endpoint is a listing.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 1000)'
        - name: name
          in: query
          description: a user by name
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flairselector.json':
    post:
      operationId: POST_api_flairselector
      security:
        - redditOAuth:
            - flair
      description: >-
        Return information about a users's flair options. 

        If link is given, return link flair options for an existing link. If
        is_newlink is True, return link flairs options for a new link
        submission. Otherwise, return user flair options for this subreddit. 

        The logged in user's flair is also returned. Subreddit moderators may
        give a user by name to instead retrieve that user's flair.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: is_newlink
          in: query
          description: boolean value
        - name: link
          in: query
          description: a fullname of a link
        - name: name
          in: query
          description: a user by name
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flairtemplate.json':
    post:
      operationId: POST_api_flairtemplate
      security:
        - redditOAuth:
            - modflair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: css_class
          in: query
          description: a valid subreddit image name
        - name: flair_template_id
          in: query
          description: ''
        - name: flair_type
          in: query
          description: 'one of (USER_FLAIR, LINK_FLAIR)'
        - name: text
          in: query
          description: a string no longer than 64 characters
        - name: text_editable
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/flairtemplate_v2.json':
    post:
      operationId: POST_api_flairtemplate_v2
      security:
        - redditOAuth:
            - modflair
      description: |-
        Create or update a flair template. 
        This new endpoint is primarily used for the redesign.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: allowable_content
          in: query
          description: 'one of (all, emoji, text)'
        - name: api_type
          in: query
          description: the string json
        - name: background_color
          in: query
          description: 'a 6-digit rgb hex color, e.g. #AABBCC'
        - name: css_class
          in: query
          description: a valid subreddit image name
        - name: flair_template_id
          in: query
          description: ''
        - name: flair_type
          in: query
          description: 'one of (USER_FLAIR, LINK_FLAIR)'
        - name: max_emojis
          in: query
          description: 'an integer between 1 and 10 (default: 10)'
        - name: mod_only
          in: query
          description: boolean value
        - name: override_css
          in: query
          description: ''
        - name: text
          in: query
          description: a string no longer than 64 characters
        - name: text_color
          in: query
          description: 'one of (light, dark)'
        - name: text_editable
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/link_flair.json':
    get:
      operationId: GET_api_link_flair
      security:
        - redditOAuth:
            - flair
      description: >-
        Return list of available link flair for the current subreddit. 

        Will not return flair if the user cannot set their own link flair and
        they are not a moderator that can set flair.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/link_flair_v2.json':
    get:
      operationId: GET_api_link_flair_v2
      security:
        - redditOAuth:
            - flair
      description: >-
        Return list of available link flair for the current subreddit. 

        Will not return flair if the user cannot set their own link flair and
        they are not a moderator that can set flair.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/selectflair.json':
    post:
      operationId: POST_api_selectflair
      security:
        - redditOAuth:
            - flair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: background_color
          in: query
          description: 'a 6-digit rgb hex color, e.g. #AABBCC'
        - name: css_class
          in: query
          description: a valid subreddit image name
        - name: flair_template_id
          in: query
          description: ''
        - name: link
          in: query
          description: a fullname of a link
        - name: name
          in: query
          description: a user by name
        - name: return_rtson
          in: query
          description: >-
            [all|only|none]: "all" saves attributes and returns rtjson "only"
            only returns rtjson"none" only saves attributes
        - name: text
          in: query
          description: a string no longer than 64 characters
        - name: text_color
          in: query
          description: 'one of (light, dark)'
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/setflairenabled.json':
    post:
      operationId: POST_api_setflairenabled
      security:
        - redditOAuth:
            - flair
      description: ''
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: flair_enabled
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/user_flair.json':
    get:
      operationId: GET_api_user_flair
      security:
        - redditOAuth:
            - flair
      description: >-
        Return list of available user flair for the current subreddit. 

        Will not return flair if flair is disabled on the subreddit, the user
        cannot set their own flair, or they are not a moderator that can set
        flair.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/user_flair_v2.json':
    get:
      operationId: GET_api_user_flair_v2
      security:
        - redditOAuth:
            - flair
      description: >-
        Return list of available user flair for the current subreddit. 

        If user is not a mod of the subreddit, this endpoint filters out
        mod_only templates.
      tags:
        - flair
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/api/v1/gold/gild/{fullname}.json':
    post:
      operationId: 'POST_api_v1_gold_gild_{fullname}'
      security:
        - redditOAuth:
            - creddits
      description: ''
      tags:
        - reddit gold
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: fullname
          in: query
          description: fullname of a thing
        - in: path
          name: fullname
          schema:
            type: string
  '/api/v1/gold/give/{username}.json':
    post:
      operationId: 'POST_api_v1_gold_give_{username}'
      security:
        - redditOAuth:
            - creddits
      description: ''
      tags:
        - reddit gold
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: months
          in: query
          description: an integer between 1 and 36
        - name: username
          in: query
          description: 'A valid, existing reddit username'
        - in: path
          name: username
          schema:
            type: string
  /api/comment.json:
    post:
      operationId: POST_api_comment
      security:
        - redditOAuth:
            - any
      description: >-
        Submit a new comment or reply to a message. 

        parent is the fullname of the thing being replied to. Its value changes
        the kind of object created by this request: 
         
        the fullname of a Link: a top-level comment in that Link's thread.
        (requires submit scope) 

        the fullname of a Comment: a comment reply to that comment. (requires
        submit scope) 

        the fullname of a Message: a message reply to that message. (requires
        privatemessages scope)  

        text should be the raw markdown body of the comment or message. 

        To start a new message thread, use /api/compose.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: return_rtjson
          in: query
          description: boolean value
        - name: richtext_json
          in: query
          description: JSON data
        - name: text
          in: query
          description: raw markdown text
        - name: thing_id
          in: query
          description: fullname of parent thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/del.json:
    post:
      operationId: POST_api_del
      security:
        - redditOAuth:
            - edit
      description: Delete a Link or Comment.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing created by the user
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/editusertext.json:
    post:
      operationId: POST_api_editusertext
      security:
        - redditOAuth:
            - edit
      description: Edit the body text of a comment or self-post.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: return_rtjson
          in: query
          description: boolean value
        - name: richtext_json
          in: query
          description: JSON data
        - name: text
          in: query
          description: raw markdown text
        - name: thing_id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/event_post_time.json:
    post:
      operationId: POST_api_event_post_time
      security:
        - redditOAuth:
            - modposts
      description: >-
        Add or modify post event times. To remove event info leave these fields
        empty.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: event_end
          in: query
          description: 'a datetime string e.g. 2018-09-11T12:00:00'
        - name: event_start
          in: query
          description: 'a datetime string e.g. 2018-09-11T12:00:00'
        - name: event_tz
          in: query
          description: a pytz timezone e.g. America/Los_Angeles
        - name: id
          in: query
          description: fullname of a link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/follow_post.json:
    post:
      operationId: POST_api_follow_post
      security:
        - redditOAuth:
            - subscribe
      description: >-
        Follow or unfollow a post. 

        To follow, follow should be True. To unfollow, follow should be False.
        The user must have access to the subreddit to be able to follow a post
        within it.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: follow
          in: query
          description: 'boolean: True to follow or False to unfollow'
        - name: fullname
          in: query
          description: fullname of a link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/hide.json:
    post:
      operationId: POST_api_hide
      security:
        - redditOAuth:
            - report
      description: |-
        Hide a link. 
        This removes it from the user's default view of subreddit listings. 
        See also: /api/unhide.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of link fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/r/{subreddit}/api/info.json':
    get:
      operationId: GET_api_info
      security:
        - redditOAuth:
            - read
      description: |-
        Return a listing of things specified by their fullnames. 
        Only Links, Comments, and Subreddits are allowed.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of thing fullnames
        - name: sr_name
          in: query
          description: comma-delimited list of subreddit names
        - name: url
          in: query
          description: a valid URL
        - in: path
          name: subreddit
          schema:
            type: string
  /api/lock.json:
    post:
      operationId: POST_api_lock
      security:
        - redditOAuth:
            - modposts
      description: |-
        Lock a link or comment. 
        Prevents a post or new child comments from receiving new comments. 
        See also: /api/unlock.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/marknsfw.json:
    post:
      operationId: POST_api_marknsfw
      security:
        - redditOAuth:
            - modposts
      description: |-
        Mark a link NSFW. 
        See also: /api/unmarknsfw.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/morechildren.json:
    get:
      operationId: GET_api_morechildren
      security:
        - redditOAuth:
            - read
      description: >-
        Retrieve additional comments omitted from a base comment tree. 

        When a comment tree is rendered, the most relevant comments are selected
        for display first. Remaining comments are stubbed out with
        "MoreComments" links. This API call is used to retrieve the additional
        comments represented by those stubs, up to 100 at a time. 

        The two core parameters required are link and children. link is the
        fullname of the link whose comments are being fetched. children is a
        comma-delimited list of comment ID36s that need to be fetched. 

        If id is passed, it should be the ID of the MoreComments object this
        call is replacing. This is needed only for the HTML UI's purposes and is
        optional otherwise. 

        NOTE: you may only make one request at a time to this API endpoint.
        Higher concurrency will result in an error being returned. 

        If limit_children is True, only return the children requested. 

        depth is the maximum depth of subtrees in the thread.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: children
          in: query
          description: ''
        - name: depth
          in: query
          description: (optional) an integer
        - name: id
          in: query
          description: (optional) id of the associated MoreChildren object
        - name: limit_children
          in: query
          description: boolean value
        - name: link_id
          in: query
          description: fullname of a link
        - name: sort
          in: query
          description: 'one of (confidence, top, new, controversial, old, random, qa, live)'
  /api/report.json:
    post:
      operationId: POST_api_report
      security:
        - redditOAuth:
            - report
      description: >-
        Report a link, comment or message. Reporting a thing brings it to the
        attention of the subreddit's moderators. Reporting a message sends it to
        a system for admin review. For links and comments, the thing is
        implicitly hidden as well (see /api/hide for details). 

        See /r/{subreddit}/about/rules for for more about subreddit rules, and
        /r/{subreddit}/about for more about free_form_reports.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: additional_info
          in: query
          description: a string no longer than 2000 characters
        - name: api_type
          in: query
          description: the string json
        - name: custom_text
          in: query
          description: a string no longer than 2000 characters
        - name: from_help_desk
          in: query
          description: boolean value
        - name: from_modmail
          in: query
          description: boolean value
        - name: modmail_conv_id
          in: query
          description: base36 modmail conversation id
        - name: other_reason
          in: query
          description: a string no longer than 100 characters
        - name: reason
          in: query
          description: a string no longer than 100 characters
        - name: rule_reason
          in: query
          description: a string no longer than 100 characters
        - name: site_reason
          in: query
          description: a string no longer than 100 characters
        - name: sr_name
          in: query
          description: a string no longer than 1000 characters
        - name: thing_id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - name: usernames
          in: query
          description: A comma-separated list of items
  /api/report_award.json:
    post:
      operationId: POST_api_report_award
      security:
        - redditOAuth:
            - report
      description: >-
        Report an award. Reporting an award brings it to the attention of a
        Reddit admin.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: award_id
          in: query
          description: a string
        - name: reason
          in: query
          description: a string no longer than 100 characters
  /api/save.json:
    post:
      operationId: POST_api_save
      security:
        - redditOAuth:
            - save
      description: |-
        Save a link or comment. 
        Saved things are kept in the user's saved listing for later perusal. 
        See also: /api/unsave.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: category
          in: query
          description: a category name
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/saved_categories.json:
    get:
      operationId: GET_api_saved_categories
      security:
        - redditOAuth:
            - save
      description: |-
        Get a list of categories in which things are currently saved. 
        See also: /api/save.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /api/sendreplies.json:
    post:
      operationId: POST_api_sendreplies
      security:
        - redditOAuth:
            - edit
      description: >-
        Enable or disable inbox replies for a link or comment. 

        state is a boolean that indicates whether you are enabling or disabling
        inbox replies - true to enable, false to disable.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing created by the user
        - name: state
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/set_contest_mode.json:
    post:
      operationId: POST_api_set_contest_mode
      security:
        - redditOAuth:
            - modposts
      description: >-
        Set or unset "contest mode" for a link's comments. 

        state is a boolean that indicates whether you are enabling or disabling
        contest mode - true to enable, false to disable.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: ''
        - name: state
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/set_subreddit_sticky.json:
    post:
      operationId: POST_api_set_subreddit_sticky
      security:
        - redditOAuth:
            - modposts
      description: >-
        Set or unset a Link as the sticky in its subreddit. 

        state is a boolean that indicates whether to sticky or unsticky this
        post - true to sticky, false to unsticky. 

        The num argument is optional, and only used when stickying a post. It
        allows specifying a particular "slot" to sticky the post into, and if
        there is already a post stickied in that slot it will be replaced. If
        there is no post in the specified slot to replace, or num is None, the
        bottom-most slot will be used.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: ''
        - name: num
          in: query
          description: an integer between 1 and 4
        - name: state
          in: query
          description: boolean value
        - name: to_profile
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/set_suggested_sort.json:
    post:
      operationId: POST_api_set_suggested_sort
      security:
        - redditOAuth:
            - modposts
      description: >-
        Set a suggested sort for a link. 

        Suggested sorts are useful to display comments in a certain preferred
        way for posts. For example, casual conversation may be better sorted by
        new by default, or AMAs may be sorted by Q&A. A sort of an empty string
        clears the default sort.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: ''
        - name: sort
          in: query
          description: >-
            one of (confidence, top, new, controversial, old, random, qa, live,
            blank)
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/spoiler.json:
    post:
      operationId: POST_api_spoiler
      security:
        - redditOAuth:
            - modposts
      description: ''
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/store_visits.json:
    post:
      operationId: POST_api_store_visits
      security:
        - redditOAuth:
            - save
      description: '*Requires a subscription to [reddit premium]'
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: links
          in: query
          description: A comma-separated list of link fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/submit.json:
    post:
      operationId: POST_api_submit
      security:
        - redditOAuth:
            - submit
      description: >-
        Submit a link to a subreddit. 

        Submit will create a link or self-post in the subreddit sr with the
        title title. If kind is "link", then url is expected to be a valid URL
        to link to. Otherwise, text, if present, will be the body of the
        self-post unless richtext_json is present, in which case it will be
        converted into the body of the self-post. An error is thrown if both
        text and richtext_json are present. 

        If a link with the same URL has already been submitted to the specified
        subreddit an error will be returned unless resubmit is true. extension
        is used for determining which view-type (e.g. json, compact etc.) to use
        for the redirect that is generated if the resubmit error occurs.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: ad
          in: query
          description: boolean value
        - name: api_type
          in: query
          description: the string json
        - name: app
          in: query
          description: ''
        - name: collection_id
          in: query
          description: (beta) the UUID of a collection
        - name: event_end
          in: query
          description: '(beta) a datetime string e.g. 2018-09-11T12:00:00'
        - name: event_start
          in: query
          description: '(beta) a datetime string e.g. 2018-09-11T12:00:00'
        - name: event_tz
          in: query
          description: (beta) a pytz timezone e.g. America/Los_Angeles
        - name: extension
          in: query
          description: extension used for redirects
        - name: flair_id
          in: query
          description: a string no longer than 36 characters
        - name: flair_text
          in: query
          description: a string no longer than 64 characters
        - name: g-recaptcha-response
          in: query
          description: ''
        - name: kind
          in: query
          description: 'one of (link, self, image, video, videogif)'
        - name: nsfw
          in: query
          description: boolean value
        - name: post_set_default_post_id
          in: query
          description: a string
        - name: post_set_id
          in: query
          description: a string
        - name: resubmit
          in: query
          description: boolean value
        - name: richtext_json
          in: query
          description: JSON data
        - name: sendreplies
          in: query
          description: boolean value
        - name: spoiler
          in: query
          description: boolean value
        - name: sr
          in: query
          description: subreddit name
        - name: text
          in: query
          description: raw markdown text
        - name: title
          in: query
          description: title of the submission. up to 300 characters long
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - name: url
          in: query
          description: a valid URL
        - name: video_poster_url
          in: query
          description: a valid URL
  /api/unhide.json:
    post:
      operationId: POST_api_unhide
      security:
        - redditOAuth:
            - report
      description: |-
        Unhide a link. 
        See also: /api/hide.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of link fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unlock.json:
    post:
      operationId: POST_api_unlock
      security:
        - redditOAuth:
            - modposts
      description: |-
        Unlock a link or comment. 
        Allow a post or comment to receive new comments. 
        See also: /api/lock.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unmarknsfw.json:
    post:
      operationId: POST_api_unmarknsfw
      security:
        - redditOAuth:
            - modposts
      description: |-
        Remove the NSFW marking from a link. 
        See also: /api/marknsfw.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unsave.json:
    post:
      operationId: POST_api_unsave
      security:
        - redditOAuth:
            - save
      description: |-
        Unsave a link or comment. 
        This removes the thing from the user's saved listings as well. 
        See also: /api/save.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unspoiler.json:
    post:
      operationId: POST_api_unspoiler
      security:
        - redditOAuth:
            - modposts
      description: ''
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/vote.json:
    post:
      operationId: POST_api_vote
      security:
        - redditOAuth:
            - vote
      description: >-
        Cast a vote on a thing. 

        id should be the fullname of the Link or Comment to vote on. 

        dir indicates the direction of the vote. Voting 1 is an upvote, -1 is a
        downvote, and 0 is equivalent to "un-voting" by clicking again on a
        highlighted arrow. 

        Note: votes must be cast by humans. That is, API clients proxying a
        human's action one-for-one are OK, but bots deciding how to vote on
        content or amplifying a human's vote are not. See the reddit rules for
        more details on what constitutes vote cheating.
      tags:
        - links & comments
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: dir
          in: query
          description: 'vote direction. one of (1, 0, -1)'
        - name: id
          in: query
          description: fullname of a thing
        - name: rank
          in: query
          description: an integer greater than 1
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/best{read}.json':
    get:
      operationId: GET_best
      security:
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: read
          schema:
            type: string
  '/by_id/{names}.json':
    get:
      operationId: 'GET_by_id_{names}'
      security:
        - redditOAuth:
            - read
      description: |-
        Get a listing of links by fullname. 
        names is a list of fullnames for links separated by commas or spaces.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: names
          in: query
          description: A comma-separated list of link fullnames
        - in: path
          name: names
          schema:
            type: string
  '/r/{subreddit}/comments/{article}{read}.json':
    get:
      operationId: 'GET_comments_{article}'
      security:
        - redditOAuth:
            - read
      description: >-
        Get the comment tree for a given Link article. 

        If supplied, comment is the ID36 of a comment in the comment tree for
        article. This comment will be the (highlighted) focal point of the
        returned view and context will be the number of parents shown. 

        depth is the maximum depth of subtrees in the thread. 

        limit is the maximum number of comments to return. 

        See also: /api/morechildren and /api/comment.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: article
          in: query
          description: ID36 of a link
        - name: comment
          in: query
          description: (optional) ID36 of a comment
        - name: context
          in: query
          description: an integer between 0 and 8
        - name: depth
          in: query
          description: (optional) an integer
        - name: limit
          in: query
          description: (optional) an integer
        - name: showedits
          in: query
          description: boolean value
        - name: showmedia
          in: query
          description: boolean value
        - name: showmore
          in: query
          description: boolean value
        - name: showtitle
          in: query
          description: boolean value
        - name: sort
          in: query
          description: 'one of (confidence, top, new, controversial, old, random, qa, live)'
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - name: theme
          in: query
          description: 'one of (default, dark)'
        - name: threaded
          in: query
          description: boolean value
        - name: truncate
          in: query
          description: an integer between 0 and 50
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: article
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/duplicates/{article}{read}.json':
    get:
      operationId: 'GET_duplicates_{article}'
      security:
        - redditOAuth:
            - read
      description: |-
        Return a list of other submissions of the same URL 
        This endpoint is a listing.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: article
          in: query
          description: The base 36 ID of a Link
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: crossposts_only
          in: query
          description: boolean value
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sort
          in: query
          description: 'one of (num_comments, new)'
        - name: sr
          in: query
          description: subreddit name
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: article
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/r/{subreddit}/hot{read}.json':
    get:
      operationId: GET_hot
      security:
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: g
          in: query
          description: >-
            one of (GLOBAL, US, AR, AU, BG, CA, CL, CO, HR, CZ, FI, FR, DE, GR,
            HU, IS, IN, IE, IT, JP, MY, MX, NZ, PH, PL, PT, PR, RO, RS, SG, ES,
            SE, TW, TH, TR, GB, US_WA, US_DE, US_DC, US_WI, US_WV, US_HI, US_FL,
            US_WY, US_NH, US_NJ, US_NM, US_TX, US_LA, US_NC, US_ND, US_NE,
            US_TN, US_NY, US_PA, US_CA, US_NV, US_VA, US_CO, US_AK, US_AL,
            US_AR, US_VT, US_IL, US_GA, US_IN, US_IA, US_OK, US_AZ, US_ID,
            US_CT, US_ME, US_MD, US_MA, US_OH, US_UT, US_MO, US_MN, US_MI,
            US_RI, US_KS, US_MT, US_MS, US_SC, US_KY, US_OR, US_SD)
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/r/{subreddit}/new{read}.json':
    get:
      operationId: GET_new
      security:
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/r/{subreddit}/random.json':
    get:
      operationId: GET_random
      security:
        - redditOAuth:
            - read
      description: The Serendipity button
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/rising{read}.json':
    get:
      operationId: GET_rising
      security:
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags:
        - listings
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/r/{subreddit}/top.json':
    get:
      operationId: GET_top
      security: &ref_10
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags: &ref_11
        - listings
      responses: &ref_12
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - &ref_13
          name: t
          in: query
          description: 'one of (hour, day, week, month, year, all)'
        - &ref_14
          name: after
          in: query
          description: fullname of a thing
        - &ref_15
          name: before
          in: query
          description: fullname of a thing
        - &ref_16
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_17
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_18
          name: show
          in: query
          description: (optional) the string all
        - &ref_19
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  '/r/{subreddit}/controversial.json':
    get:
      operationId: GET_controversial
      security: *ref_10
      description: This endpoint is a listing.
      tags: *ref_11
      responses: *ref_12
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_13
        - *ref_14
        - *ref_15
        - *ref_16
        - *ref_17
        - *ref_18
        - *ref_19
  '/api/live/by_id/{names}.json':
    get:
      operationId: 'GET_api_live_by_id_{names}'
      security:
        - redditOAuth:
            - read
      description: Get a listing of live events by id.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: names
          in: query
          description: a comma-delimited list of live thread fullnames or IDs
        - in: path
          name: names
          schema:
            type: string
  /api/live/create.json:
    post:
      operationId: POST_api_live_create
      security:
        - redditOAuth:
            - submit
      description: >-
        Create a new live thread. 

        Once created, the initial settings can be modified with
        /api/live/thread/edit and new updates can be posted with
        /api/live/thread/update.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: description
          in: query
          description: raw markdown text
        - name: nsfw
          in: query
          description: boolean value
        - name: resources
          in: query
          description: raw markdown text
        - name: title
          in: query
          description: a string no longer than 120 characters
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/live/happening_now.json:
    get:
      operationId: GET_api_live_happening_now
      security:
        - redditOAuth:
            - read
      description: >-
        Get some basic information about the currently featured live thread. 

        Returns an empty 204 response for api requests if no thread is currently
        featured. 

        See also: /api/live/thread/about.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: show_announcements
          in: query
          description: boolean value
  '/api/live/{thread}/accept_contributor_invite.json':
    post:
      operationId: 'POST_api_live_{thread}_accept_contributor_invite'
      security:
        - redditOAuth:
            - livemanage
      description: |-
        Accept a pending invitation to contribute to the thread. 
        See also: /api/live/thread/leave_contributor.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/close_thread.json':
    post:
      operationId: 'POST_api_live_{thread}_close_thread'
      security:
        - redditOAuth:
            - livemanage
      description: |-
        Permanently close the thread, disallowing future updates. 
        Requires the close permission for this thread.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/delete_update.json':
    post:
      operationId: 'POST_api_live_{thread}_delete_update'
      security:
        - redditOAuth:
            - edit
      description: >-
        Delete an update from the thread. 

        Requires that specified update must have been authored by the user or
        that you have the edit permission for this thread. 

        See also: /api/live/thread/update.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: >-
            the ID of a single update. e.g.
            LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/edit.json':
    post:
      operationId: 'POST_api_live_{thread}_edit'
      security:
        - redditOAuth:
            - livemanage
      description: |-
        Configure the thread. 
        Requires the settings permission for this thread. 
        See also: /live/thread/about.json.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: description
          in: query
          description: raw markdown text
        - name: nsfw
          in: query
          description: boolean value
        - name: resources
          in: query
          description: raw markdown text
        - name: title
          in: query
          description: a string no longer than 120 characters
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/hide_discussion.json':
    post:
      operationId: 'POST_api_live_{thread}_hide_discussion'
      security:
        - redditOAuth:
            - livemanage
      description: |-
        Hide a linked comment thread from the discussions sidebar and listing. 
        Requires the discussions permission for this thread. 
        See also: /api/live/thread/unhide_discussion.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: link
          in: query
          description: The base 36 ID of a Link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/invite_contributor.json':
    post:
      operationId: 'POST_api_live_{thread}_invite_contributor'
      security:
        - redditOAuth:
            - livemanage
      description: >-
        Invite another user to contribute to the thread. 

        Requires the manage permission for this thread. If the recipient accepts
        the invite, they will be granted the permissions specified. 

        See also: /api/live/thread/accept_contributor_invite, and
        /api/live/thread/rm_contributor_invite.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: name
          in: query
          description: the name of an existing user
        - name: permissions
          in: query
          description: 'permission description e.g. +update,+edit,-manage'
        - name: type
          in: query
          description: 'one of (liveupdate_contributor_invite, liveupdate_contributor)'
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/leave_contributor.json':
    post:
      operationId: 'POST_api_live_{thread}_leave_contributor'
      security:
        - redditOAuth:
            - livemanage
      description: >-
        Abdicate contributorship of the thread. 

        See also: /api/live/thread/accept_contributor_invite, and
        /api/live/thread/invite_contributor.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/report.json':
    post:
      operationId: 'POST_api_live_{thread}_report'
      security:
        - redditOAuth:
            - report
      description: Report the thread for violating the rules of reddit.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: type
          in: query
          description: >-
            one of (spam, vote-manipulation, personal-information,
            sexualizing-minors, site-breaking)
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/rm_contributor.json':
    post:
      operationId: 'POST_api_live_{thread}_rm_contributor'
      security:
        - redditOAuth:
            - livemanage
      description: |-
        Revoke another user's contributorship. 
        Requires the manage permission for this thread. 
        See also: /api/live/thread/invite_contributor.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: fullname of a account
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/rm_contributor_invite.json':
    post:
      operationId: 'POST_api_live_{thread}_rm_contributor_invite'
      security:
        - redditOAuth:
            - livemanage
      description: |-
        Revoke an outstanding contributor invite. 
        Requires the manage permission for this thread. 
        See also: /api/live/thread/invite_contributor.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: fullname of a account
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/set_contributor_permissions.json':
    post:
      operationId: 'POST_api_live_{thread}_set_contributor_permissions'
      security:
        - redditOAuth:
            - livemanage
      description: >-
        Change a contributor or contributor invite's permissions. 

        Requires the manage permission for this thread. 

        See also: /api/live/thread/invite_contributor and
        /api/live/thread/rm_contributor.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: name
          in: query
          description: the name of an existing user
        - name: permissions
          in: query
          description: 'permission description e.g. +update,+edit,-manage'
        - name: type
          in: query
          description: 'one of (liveupdate_contributor_invite, liveupdate_contributor)'
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/strike_update.json':
    post:
      operationId: 'POST_api_live_{thread}_strike_update'
      security:
        - redditOAuth:
            - edit
      description: >-
        Strike (mark incorrect and cross out) the content of an update. 

        Requires that specified update must have been authored by the user or
        that you have the edit permission for this thread. 

        See also: /api/live/thread/update.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: id
          in: query
          description: >-
            the ID of a single update. e.g.
            LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/unhide_discussion.json':
    post:
      operationId: 'POST_api_live_{thread}_unhide_discussion'
      security:
        - redditOAuth:
            - livemanage
      description: >-
        Unhide a linked comment thread from the discussions sidebar and
        listing.. 

        Requires the discussions permission for this thread. 

        See also: /api/live/thread/hide_discussion.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: link
          in: query
          description: The base 36 ID of a Link
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/api/live/{thread}/update.json':
    post:
      operationId: 'POST_api_live_{thread}_update'
      security:
        - redditOAuth:
            - submit
      description: >-
        Post an update to the thread. 

        Requires the update permission for this thread. 

        See also: /api/live/thread/strike_update, and
        /api/live/thread/delete_update.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: body
          in: query
          description: raw markdown text
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: thread
          schema:
            type: string
  '/live/{thread}{read}.json':
    get:
      operationId: 'GET_live_{thread}'
      security:
        - redditOAuth:
            - read
      description: |-
        Get a list of updates posted in this thread. 
        See also: /api/live/thread/update. 
        This endpoint is a listing.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: >-
            the ID of a single update. e.g.
            LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603
        - name: before
          in: query
          description: >-
            the ID of a single update. e.g.
            LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: is_embed
          in: query
          description: (internal use only)
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: stylesr
          in: query
          description: subreddit name
        - in: path
          name: thread
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/live/{thread}/about.json':
    get:
      operationId: 'GET_live_{thread}_about'
      security:
        - redditOAuth:
            - read
      description: |-
        Get some basic information about the live thread. 
        See also: /api/live/thread/edit.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: thread
          schema:
            type: string
  '/live/{thread}/contributors.json':
    get:
      operationId: 'GET_live_{thread}_contributors'
      security:
        - redditOAuth:
            - read
      description: >-
        Get a list of users that contribute to this thread. 

        See also: /api/live/thread/invite_contributor, and
        /api/live/thread/rm_contributor.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: thread
          schema:
            type: string
  '/live/{thread}/discussions{read}.json':
    get:
      operationId: 'GET_live_{thread}_discussions'
      security:
        - redditOAuth:
            - read
      description: |-
        Get a list of reddit submissions linking to this thread. 
        This endpoint is a listing.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: thread
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/live/{thread}/updates/{update_id}.json':
    get:
      operationId: 'GET_live_{thread}_updates_{update_id}'
      security:
        - redditOAuth:
            - read
      description: Get details about a specific update in a live thread.
      tags:
        - live threads
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: thread
          schema:
            type: string
        - in: path
          name: update_id
          schema:
            type: string
  /api/block.json:
    post:
      operationId: POST_api_block
      security:
        - redditOAuth:
            - privatemessages
      description: For blocking the author of a thing via inbox.
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/collapse_message.json:
    post:
      operationId: POST_api_collapse_message
      security:
        - redditOAuth:
            - privatemessages
      description: |-
        Collapse a message 
        See also: /api/uncollapse_message
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of thing fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/compose.json:
    post:
      operationId: POST_api_compose
      security:
        - redditOAuth:
            - privatemessages
      description: Handles message composition under /message/compose.
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: from_sr
          in: query
          description: subreddit name
        - name: g-recaptcha-response
          in: query
          description: ''
        - name: subject
          in: query
          description: a string no longer than 100 characters
        - name: text
          in: query
          description: raw markdown text
        - name: to
          in: query
          description: the name of an existing user
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/del_msg.json:
    post:
      operationId: POST_api_del_msg
      security:
        - redditOAuth:
            - privatemessages
      description: Delete messages from the recipient's view of their inbox.
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/read_all_messages.json:
    post:
      operationId: POST_api_read_all_messages
      security:
        - redditOAuth:
            - privatemessages
      description: >-
        Queue up marking all messages for a user as read. 

        This may take some time, and returns 202 to acknowledge acceptance of
        the request.
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: filter_types
          in: query
          description: A comma-separated list of items
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/read_message.json:
    post:
      operationId: POST_api_read_message
      security:
        - redditOAuth:
            - privatemessages
      description: ''
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of thing fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unblock_subreddit.json:
    post:
      operationId: POST_api_unblock_subreddit
      security:
        - redditOAuth:
            - privatemessages
      description: ''
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/uncollapse_message.json:
    post:
      operationId: POST_api_uncollapse_message
      security:
        - redditOAuth:
            - privatemessages
      description: |-
        Uncollapse a message 
        See also: /api/collapse_message
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of thing fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unread_message.json:
    post:
      operationId: POST_api_unread_message
      security:
        - redditOAuth:
            - privatemessages
      description: ''
      tags:
        - private messages
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: A comma-separated list of thing fullnames
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /message/inbox.json:
    get:
      operationId: GET_message_inbox
      security: &ref_20
        - redditOAuth:
            - privatemessages
      description: This endpoint is a listing.
      tags: &ref_21
        - private messages
      responses: &ref_22
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - &ref_23
          name: mark
          in: query
          description: 'one of (true, false)'
        - &ref_24
          name: mid
          in: query
          description: ''
        - &ref_25
          name: after
          in: query
          description: fullname of a thing
        - &ref_26
          name: before
          in: query
          description: fullname of a thing
        - &ref_27
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_28
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_29
          name: show
          in: query
          description: (optional) the string all
        - &ref_30
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  /message/unread.json:
    get:
      operationId: GET_message_unread
      security: *ref_20
      description: This endpoint is a listing.
      tags: *ref_21
      responses: *ref_22
      parameters:
        - *ref_23
        - *ref_24
        - *ref_25
        - *ref_26
        - *ref_27
        - *ref_28
        - *ref_29
        - *ref_30
  /message/sent.json:
    get:
      operationId: GET_message_sent
      security: *ref_20
      description: This endpoint is a listing.
      tags: *ref_21
      responses: *ref_22
      parameters:
        - *ref_23
        - *ref_24
        - *ref_25
        - *ref_26
        - *ref_27
        - *ref_28
        - *ref_29
        - *ref_30
  '/r/{subreddit}/api/saved_media_text.json':
    get:
      operationId: GET_api_saved_media_text
      security:
        - redditOAuth:
            - submit
      description: >-
        Retrieve the advisory text about saving media for relevant media links. 

        This endpoint returns a notice for display during the post submission
        process that is pertinent to media links.
      tags:
        - misc
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: url
          in: query
          description: a valid URL
        - in: path
          name: subreddit
          schema:
            type: string
  /api/v1/scopes.json:
    get:
      operationId: GET_api_v1_scopes
      security:
        - redditOAuth:
            - any
      description: >-
        Retrieve descriptions of reddit's OAuth2 scopes. 

        If no scopes are given, information on all scopes are returned. 

        Invalid scope(s) will result in a 400 error with body that indicates the
        invalid scope(s).
      tags:
        - misc
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: scopes
          in: query
          description: (optional) An OAuth2 scope string
  '/r/{subreddit}/about/log{modlog}.json':
    get:
      operationId: GET_about_log
      security:
        - redditOAuth:
            - modlog
      description: >-
        Get a list of recent moderation actions. 

        Moderator actions taken within a subreddit are logged. This listing is a
        view of that log with various filters to aid in analyzing the
        information. 

        The optional mod parameter can be a comma-delimited list of moderator
        names to restrict the results to, or the string a to restrict the
        results to admin actions taken within the subreddit. 

        The type parameter is optional and if sent limits the log entries
        returned to only those of the type specified. 

        This endpoint is a listing.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: a ModAction ID
        - name: before
          in: query
          description: a ModAction ID
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 500)'
        - name: mod
          in: query
          description: (optional) a moderator filter
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - name: type
          in: query
          description: >-
            one of (banuser, unbanuser, spamlink, removelink, approvelink,
            spamcomment, removecomment, approvecomment, addmoderator,
            showcomment, invitemoderator, uninvitemoderator,
            acceptmoderatorinvite, removemoderator, addcontributor,
            removecontributor, editsettings, editflair, distinguish, marknsfw,
            wikibanned, wikicontributor, wikiunbanned, wikipagelisted,
            removewikicontributor, wikirevise, wikipermlevel, ignorereports,
            unignorereports, setpermissions, setsuggestedsort, sticky, unsticky,
            setcontestmode, unsetcontestmode, lock, unlock, muteuser,
            unmuteuser, createrule, editrule, reorderrules, deleterule, spoiler,
            unspoiler, modmail_enrollment, community_styling, community_widgets,
            markoriginalcontent, collections, events, hidden_award,
            add_community_topics, remove_community_topics,
            create_scheduled_post, edit_scheduled_post, delete_scheduled_post,
            submit_scheduled_post, edit_post_requirements, invitesubscriber,
            submit_content_rating_survey, adjust_post_crowd_control_level,
            enable_post_crowd_control_filter, disable_post_crowd_control_filter,
            deleteoverriddenclassification, overrideclassification,
            reordermoderators, snoozereports, unsnoozereports, addnote,
            deletenote, addremovalreason, createremovalreason,
            updateremovalreason, deleteremovalreason)
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: modlog
          schema:
            type: string
  '/r/{subreddit}/about/reports.json':
    get:
      operationId: GET_about_reports
      security: &ref_31
        - redditOAuth:
            - read
      description: >-
        Return a listing of posts relevant to moderators. 
         
        reports: Things that have been reported. 

        spam: Things that have been marked as spam or otherwise removed. 

        modqueue: Things requiring moderator review, such as reported things and
        items caught by the spam filter. 

        unmoderated: Things that have yet to be approved/removed by a mod. 

        edited: Things that have been edited recently.  

        Requires the "posts" moderator permission for the subreddit. 

        This endpoint is a listing.
      tags: &ref_32
        - moderation
      responses: &ref_33
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - &ref_34
          name: after
          in: query
          description: fullname of a thing
        - &ref_35
          name: before
          in: query
          description: fullname of a thing
        - &ref_36
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_37
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_38
          name: location
          in: query
          description: ''
        - &ref_39
          name: only
          in: query
          description: 'one of (links, comments, chat_comments)'
        - &ref_40
          name: show
          in: query
          description: (optional) the string all
        - &ref_41
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  '/r/{subreddit}/about/spam.json':
    get:
      operationId: GET_about_spam
      security: *ref_31
      description: >-
        Return a listing of posts relevant to moderators. 
         
        reports: Things that have been reported. 

        spam: Things that have been marked as spam or otherwise removed. 

        modqueue: Things requiring moderator review, such as reported things and
        items caught by the spam filter. 

        unmoderated: Things that have yet to be approved/removed by a mod. 

        edited: Things that have been edited recently.  

        Requires the "posts" moderator permission for the subreddit. 

        This endpoint is a listing.
      tags: *ref_32
      responses: *ref_33
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_34
        - *ref_35
        - *ref_36
        - *ref_37
        - *ref_38
        - *ref_39
        - *ref_40
        - *ref_41
  '/r/{subreddit}/about/modqueue.json':
    get:
      operationId: GET_about_modqueue
      security: *ref_31
      description: >-
        Return a listing of posts relevant to moderators. 
         
        reports: Things that have been reported. 

        spam: Things that have been marked as spam or otherwise removed. 

        modqueue: Things requiring moderator review, such as reported things and
        items caught by the spam filter. 

        unmoderated: Things that have yet to be approved/removed by a mod. 

        edited: Things that have been edited recently.  

        Requires the "posts" moderator permission for the subreddit. 

        This endpoint is a listing.
      tags: *ref_32
      responses: *ref_33
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_34
        - *ref_35
        - *ref_36
        - *ref_37
        - *ref_38
        - *ref_39
        - *ref_40
        - *ref_41
  '/r/{subreddit}/about/unmoderated.json':
    get:
      operationId: GET_about_unmoderated
      security: *ref_31
      description: >-
        Return a listing of posts relevant to moderators. 
         
        reports: Things that have been reported. 

        spam: Things that have been marked as spam or otherwise removed. 

        modqueue: Things requiring moderator review, such as reported things and
        items caught by the spam filter. 

        unmoderated: Things that have yet to be approved/removed by a mod. 

        edited: Things that have been edited recently.  

        Requires the "posts" moderator permission for the subreddit. 

        This endpoint is a listing.
      tags: *ref_32
      responses: *ref_33
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_34
        - *ref_35
        - *ref_36
        - *ref_37
        - *ref_38
        - *ref_39
        - *ref_40
        - *ref_41
  '/r/{subreddit}/about/edited.json':
    get:
      operationId: GET_about_edited
      security: *ref_31
      description: >-
        Return a listing of posts relevant to moderators. 
         
        reports: Things that have been reported. 

        spam: Things that have been marked as spam or otherwise removed. 

        modqueue: Things requiring moderator review, such as reported things and
        items caught by the spam filter. 

        unmoderated: Things that have yet to be approved/removed by a mod. 

        edited: Things that have been edited recently.  

        Requires the "posts" moderator permission for the subreddit. 

        This endpoint is a listing.
      tags: *ref_32
      responses: *ref_33
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_34
        - *ref_35
        - *ref_36
        - *ref_37
        - *ref_38
        - *ref_39
        - *ref_40
        - *ref_41
  '/r/{subreddit}/api/accept_moderator_invite.json':
    post:
      operationId: POST_api_accept_moderator_invite
      security:
        - redditOAuth:
            - modself
      description: >-
        Accept an invite to moderate the specified subreddit. 

        The authenticated user must have been invited to moderate the subreddit
        by one of its current moderators. 

        See also: /api/friend and /subreddits/mine.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  /api/approve.json:
    post:
      operationId: POST_api_approve
      security:
        - redditOAuth:
            - modposts
      description: >-
        Approve a link or comment. 

        If the thing was removed, it will be re-inserted into appropriate
        listings. Any reports on the approved thing will be discarded. 

        See also: /api/remove.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/distinguish.json:
    post:
      operationId: POST_api_distinguish
      security:
        - redditOAuth:
            - modposts
      description: >-
        Distinguish a thing's author with a sigil. 

        This can be useful to draw attention to and confirm the identity of the
        user in the context of a link or comment of theirs. The options for
        distinguish are as follows: 
         
        yes - add a moderator distinguish ([M]). only if the user is a moderator
        of the subreddit the thing is in. 

        no - remove any distinguishes. 

        admin - add an admin distinguish ([A]). admin accounts only. 

        special - add a user-specific distinguish. depends on user.  

        The first time a top-level comment is moderator distinguished, the
        author of the link the comment is in reply to will get a notification in
        their inbox. 

        sticky is a boolean flag for comments, which will stick the distingushed
        comment to the top of all comments threads. If a comment is marked
        sticky, it will override any other stickied comment for that link (as
        only one comment may be stickied at a time.) Only top-level comments may
        be stickied.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: how
          in: query
          description: 'one of (yes, no, admin, special)'
        - name: id
          in: query
          description: fullname of a thing
        - name: sticky
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/ignore_reports.json:
    post:
      operationId: POST_api_ignore_reports
      security:
        - redditOAuth:
            - modposts
      description: >-
        Prevent future reports on a thing from causing notifications. 

        Any reports made about a thing after this flag is set on it will not
        cause notifications or make the thing show up in the various moderation
        listings. 

        See also: /api/unignore_reports.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/leavecontributor.json:
    post:
      operationId: POST_api_leavecontributor
      security:
        - redditOAuth:
            - modself
      description: |-
        Abdicate approved user status in a subreddit. 
        See also: /api/friend.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/leavemoderator.json:
    post:
      operationId: POST_api_leavemoderator
      security:
        - redditOAuth:
            - modself
      description: |-
        Abdicate moderator status in a subreddit. 
        See also: /api/friend.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/mute_message_author.json:
    post:
      operationId: POST_api_mute_message_author
      security:
        - redditOAuth:
            - modcontributors
      description: For muting user via modmail.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/remove.json:
    post:
      operationId: POST_api_remove
      security:
        - redditOAuth:
            - modposts
      description: >-
        Remove a link, comment, or modmail message. 

        If the thing is a link, it will be removed from all subreddit listings.
        If the thing is a comment, it will be redacted and removed from all
        subreddit comment listings. 

        See also: /api/approve.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: spam
          in: query
          description: boolean value
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/show_comment.json:
    post:
      operationId: POST_api_show_comment
      security:
        - redditOAuth:
            - modposts
      description: >-
        Mark a comment that it should not be collapsed because of crowd
        control. 

        The comment could still be collapsed for other reasons.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/snooze_reports.json:
    post:
      operationId: POST_api_snooze_reports
      security:
        - redditOAuth:
            - modposts
      description: >-
        Prevent future reports on a thing from causing notifications. 

        For users who reported this thing (post, comment, etc) with the given
        report reason, reports from those users in the next 7 days will not be
        escalated to moderators. See also: /api/unsnooze_reports.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: reason
          in: query
          description: ''
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unignore_reports.json:
    post:
      operationId: POST_api_unignore_reports
      security:
        - redditOAuth:
            - modposts
      description: |-
        Allow future reports on a thing to cause notifications. 
        See also: /api/ignore_reports.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unmute_message_author.json:
    post:
      operationId: POST_api_unmute_message_author
      security:
        - redditOAuth:
            - modcontributors
      description: For unmuting user via modmail.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/unsnooze_reports.json:
    post:
      operationId: POST_api_unsnooze_reports
      security:
        - redditOAuth:
            - modposts
      description: >-
        For users whose reports were snoozed (see /api/snooze_reports), to go
        back to escalating future reports from those users.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: reason
          in: query
          description: ''
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/update_crowd_control_level.json:
    post:
      operationId: POST_api_update_crowd_control_level
      security:
        - redditOAuth:
            - modposts
      description: Change the post's crowd control level.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: fullname of a thing
        - name: level
          in: query
          description: an integer between 0 and 3
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/r/{subreddit}/stylesheet.json':
    get:
      operationId: GET_stylesheet
      security:
        - redditOAuth:
            - modconfig
      description: |-
        Redirect to the subreddit's stylesheet if one exists. 
        See also: /api/subreddit_stylesheet.
      tags:
        - moderation
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  /api/mod/bulk_read.json:
    post:
      operationId: POST_api_mod_bulk_read
      security:
        - redditOAuth:
            - modmail
      description: >-
        Marks all conversations read for a particular conversation state within
        the passed list of subreddits.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: entity
          in: query
          description: comma-delimited list of subreddit names
        - name: state
          in: query
          description: >-
            one of (all, appeals, notifications, inbox, filtered, inprogress,
            mod, archived, default, highlighted, join_requests, new)
  /api/mod/conversations.json:
    get:
      operationId: GET_api_mod_conversations
      security:
        - redditOAuth:
            - modmail
      description: Get conversations for a logged in user or subreddits
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: base36 modmail conversation id
        - name: entity
          in: query
          description: comma-delimited list of subreddit names
        - name: limit
          in: query
          description: 'an integer between 1 and 100 (default: 25)'
        - name: sort
          in: query
          description: 'one of (recent, mod, user, unread)'
        - name: state
          in: query
          description: >-
            one of (all, appeals, notifications, inbox, filtered, inprogress,
            mod, archived, default, highlighted, join_requests, new)
    post:
      operationId: POST_api_mod_conversations
      security:
        - redditOAuth:
            - modmail
      description: >-
        Creates a new conversation for a particular SR. 

        This endpoint will create a ModmailConversation object as well as the
        first ModmailMessage within the ModmailConversation object. 

        A note on to: 

        The to field for this endpoint is somewhat confusing. It can be: 
         
        A User, passed like "username" or "u/username" 

        A Subreddit, passed like "r/subreddit" 

        null  

        If to is null, it is currently inferred to mean either: 

        (A) if the current user is a mod with mail permission, this is an
        internal moderator discussion amongst themselves 

        (B) if the current user is NOT a mod with mail permission, the logged in
        user is communicating with the subreddit, as if to was set to the
        current logged in user 

        In this way to is a bit of a misnomer in modmail conversations. What it
        really means is the participant of the conversation who is not a mod of
        the subreddit. The conversation could have been created from that
        participant, or not.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: body
          in: query
          description: raw markdown text
        - name: isAuthorHidden
          in: query
          description: boolean value
        - name: srName
          in: query
          description: subreddit name
        - name: subject
          in: query
          description: a string no longer than 100 characters
        - name: to
          in: query
          description: Modmail conversation recipient fullname
  '/api/mod/conversations/:conversation_id.json':
    get:
      operationId: 'GET_api_mod_conversations_:conversation_id'
      security:
        - redditOAuth:
            - modmail
      description: >-
        Returns all messages, mod actions and conversation metadata for a given
        conversation id
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
        - name: markRead
          in: query
          description: boolean value
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id'
      security:
        - redditOAuth:
            - modmail
      description: >-
        Creates a new message for a particular conversation. 

        Workflow: (A) Validate params & check permissions (B) Create our local
        message in our conversation (C) Create the message in the participant
        system (legacy PM or the other subreddit's conversation)
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: body
          in: query
          description: raw markdown text
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
        - name: isAuthorHidden
          in: query
          description: boolean value
        - name: isInternal
          in: query
          description: boolean value
  '/api/mod/conversations/:conversation_id/approve.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_approve'
      security:
        - redditOAuth:
            - modmail
      description: Approve the non mod user associated with a particular conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/archive.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_archive'
      security:
        - redditOAuth:
            - modmail
      description: Marks a conversation as archived.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/disapprove.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_disapprove'
      security:
        - redditOAuth:
            - modmail
      description: Disapprove the non mod user associated with a particular conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/highlight.json':
    delete:
      operationId: 'DELETE_api_mod_conversations_:conversation_id_highlight'
      security:
        - redditOAuth:
            - modmail
      description: Removes a highlight from a conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_highlight'
      security:
        - redditOAuth:
            - modmail
      description: Marks a conversation as highlighted.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/mute.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_mute'
      security:
        - redditOAuth:
            - modmail
      description: Mutes the non mod user associated with a particular conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
        - name: num_hours
          in: query
          description: 'one of (72, 168, 672)'
  '/api/mod/conversations/:conversation_id/temp_ban.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_temp_ban'
      security:
        - redditOAuth:
            - modmail
      description: >-
        Temporary ban (switch from permanent to temporary ban) the non mod user
        associated with a particular conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
        - name: duration
          in: query
          description: an integer between 1 and 999
  '/api/mod/conversations/:conversation_id/unarchive.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_unarchive'
      security:
        - redditOAuth:
            - modmail
      description: Marks conversation as unarchived.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/unban.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_unban'
      security:
        - redditOAuth:
            - modmail
      description: Unban the non mod user associated with a particular conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/unmute.json':
    post:
      operationId: 'POST_api_mod_conversations_:conversation_id_unmute'
      security:
        - redditOAuth:
            - modmail
      description: Unmutes the non mod user associated with a particular conversation.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  '/api/mod/conversations/:conversation_id/user.json':
    get:
      operationId: 'GET_api_mod_conversations_:conversation_id_user'
      security:
        - redditOAuth:
            - modmail
      description: >-
        Returns recent posts, comments and modmail conversations for a given
        user.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversation_id
          in: query
          description: base36 modmail conversation id
  /api/mod/conversations/read.json:
    post:
      operationId: POST_api_mod_conversations_read
      security:
        - redditOAuth:
            - modmail
      description: Marks a conversations as read for the user.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversationIds
          in: query
          description: A comma-separated list of items
  /api/mod/conversations/subreddits.json:
    get:
      operationId: GET_api_mod_conversations_subreddits
      security:
        - redditOAuth:
            - modmail
      description: >-
        Returns a list of srs that the user moderates that are also enrolled in
        the new modmail
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /api/mod/conversations/unread.json:
    post:
      operationId: POST_api_mod_conversations_unread
      security:
        - redditOAuth:
            - modmail
      description: Marks conversations as unread for the user.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: conversationIds
          in: query
          description: A comma-separated list of items
  /api/mod/conversations/unread/count.json:
    get:
      operationId: GET_api_mod_conversations_unread_count
      security:
        - redditOAuth:
            - modmail
      description: >-
        Endpoint to retrieve the unread conversation count by conversation
        state.
      tags:
        - new modmail
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters: []
  /api/mod/notes.json:
    delete:
      operationId: DELETE_api_mod_notes
      security:
        - redditOAuth:
            - modnote
      description: |-
        Delete a mod user note where type=NOTE. 
        Parameters should be passed as query parameters.
      tags:
        - modnote
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: note_id
          in: query
          description: >-
            a unique ID for the note to be deleted (should have a ModNote_
            prefix)
        - name: subreddit
          in: query
          description: subreddit name
        - name: user
          in: query
          description: account username
    get:
      operationId: GET_api_mod_notes
      security:
        - redditOAuth:
            - modnote
      description: Get mod notes for a specific user in a given subreddit.
      tags:
        - modnote
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: before
          in: query
          description: (optional) an encoded string used for pagination with mod notes
        - name: filter
          in: query
          description: >-
            (optional) one of (NOTE, APPROVAL, REMOVAL, BAN, MUTE, INVITE, SPAM,
            CONTENT_CHANGE, MOD_ACTION, ALL), to be used for querying specific
            types of mod notes (default: all)
        - name: limit
          in: query
          description: >-
            (optional) the number of mod notes to return in the response payload
            (default: 25, max: 100)'}
        - name: subreddit
          in: query
          description: subreddit name
        - name: user
          in: query
          description: account username
    post:
      operationId: POST_api_mod_notes
      security:
        - redditOAuth:
            - modnote
      description: Create a mod user note where type=NOTE.
      tags:
        - modnote
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: label
          in: query
          description: >-
            (optional) one of (BOT_BAN, PERMA_BAN, BAN, ABUSE_WARNING,
            SPAM_WARNING, SPAM_WATCH, SOLID_CONTRIBUTOR, HELPFUL_USER)
        - name: note
          in: query
          description: >-
            Content of the note, should be a string with a maximum character
            limit of 250
        - name: reddit_id
          in: query
          description: >-
            (optional) a fullname of a comment or post (should have either a t1
            or t3 prefix)
        - name: subreddit
          in: query
          description: subreddit name
        - name: user
          in: query
          description: account username
  /api/mod/notes/recent.json:
    get:
      operationId: GET_api_mod_notes_recent
      security:
        - redditOAuth:
            - modnote
      description: >-
        Fetch the most recent notes written by a moderator 

        Both parameters should be comma separated lists of equal lengths. The
        first subreddit will be paired with the first account to represent a
        query for a mod written note for that account in that subreddit and so
        forth for all subsequent pairs of subreddits and accounts. This request
        accepts up to 500 pairs of subreddit names and usernames. Parameters
        should be passed as query parameters. 

        The response will be a list of mod notes in the order that subreddits
        and accounts were given. If no note exist for a given subreddit/account
        pair, then null will take its place in the list.
      tags:
        - modnote
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: subreddits
          in: query
          description: a comma delimited list of subreddits by name
        - name: users
          in: query
          description: a comma delimited list of usernames
  /api/multi/copy.json:
    post:
      operationId: POST_api_multi_copy
      security:
        - redditOAuth:
            - subscribe
      description: >-
        Copy a multi. 

        Responds with 409 Conflict if the target already exists. 

        A "copied from ..." line will automatically be appended to the
        description.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: description_md
          in: query
          description: raw markdown text
        - name: display_name
          in: query
          description: a string no longer than 50 characters
        - name: expand_srs
          in: query
          description: boolean value
        - name: from
          in: query
          description: multireddit url path
        - name: to
          in: query
          description: destination multireddit url path
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  /api/multi/mine.json:
    get:
      operationId: GET_api_multi_mine
      security:
        - redditOAuth:
            - read
      description: Fetch a list of multis belonging to the current user.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: expand_srs
          in: query
          description: boolean value
  '/api/multi/user/{username}.json':
    get:
      operationId: 'GET_api_multi_user_{username}'
      security:
        - redditOAuth:
            - read
      description: Fetch a list of public multis belonging to username
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: expand_srs
          in: query
          description: boolean value
        - name: username
          in: query
          description: 'A valid, existing reddit username'
        - in: path
          name: username
          schema:
            type: string
  '/api/filter/{filterpath}.json':
    delete:
      operationId: 'DELETE_api_filter_{filterpath}'
      security:
        - redditOAuth:
            - subscribe
      description: Delete a multi.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - name: multipath
          in: query
          description: multireddit url path
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - name: expand_srs
          in: query
          description: boolean value
    get:
      operationId: 'GET_api_filter_{filterpath}'
      security:
        - redditOAuth:
            - read
      description: Fetch a multi's data and subreddit list by name.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - name: expand_srs
          in: query
          description: boolean value
        - name: multipath
          in: query
          description: multireddit url path
    post:
      operationId: 'POST_api_filter_{filterpath}'
      security:
        - redditOAuth:
            - subscribe
      description: Create a multi. Responds with 409 Conflict if it already exists.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - name: model
          in: query
          description: >-
            json data: { "description_md": raw markdown text, "display_name": a
            string no longer than 50 characters, "icon_img": one of (`png`,
            `jpg`, `jpeg`), "key_color": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "subreddits": [ { "name": subreddit name, }, ... ],
            "visibility": one of (`private`, `public`, `hidden`), }
        - name: multipath
          in: query
          description: multireddit url path
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - name: expand_srs
          in: query
          description: boolean value
    put:
      operationId: 'PUT_api_filter_{filterpath}'
      security:
        - redditOAuth:
            - subscribe
      description: Create or update a multi.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - name: expand_srs
          in: query
          description: boolean value
        - name: model
          in: query
          description: >-
            json data: { "description_md": raw markdown text, "display_name": a
            string no longer than 50 characters, "icon_img": one of (`png`,
            `jpg`, `jpeg`), "key_color": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "subreddits": [ { "name": subreddit name, }, ... ],
            "visibility": one of (`private`, `public`, `hidden`), }
        - name: multipath
          in: query
          description: multireddit url path
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/api/multi/{multipath}/description.json':
    get:
      operationId: 'GET_api_multi_{multipath}_description'
      security:
        - redditOAuth:
            - read
      description: Get a multi's description.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: multipath
          in: query
          description: multireddit url path
        - in: path
          name: multipath
          schema:
            type: string
    put:
      operationId: 'PUT_api_multi_{multipath}_description'
      security:
        - redditOAuth:
            - read
      description: Change a multi's markdown description.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: model
          in: query
          description: 'json data: { "body_md": raw markdown text, }'
        - name: multipath
          in: query
          description: multireddit url path
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: multipath
          schema:
            type: string
  '/api/filter/{filterpath}/r/{srname}.json':
    delete:
      operationId: 'DELETE_api_filter_{filterpath}_r_{srname}'
      security:
        - redditOAuth:
            - subscribe
      description: Remove a subreddit from a multi.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - in: path
          name: srname
          schema:
            type: string
        - name: multipath
          in: query
          description: multireddit url path
        - name: srname
          in: query
          description: subreddit name
        - name: uh / X-Modhash header
          in: query
          description: a modhash
    get:
      operationId: 'GET_api_filter_{filterpath}_r_{srname}'
      security:
        - redditOAuth:
            - read
      description: Get data about a subreddit in a multi.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - in: path
          name: srname
          schema:
            type: string
        - name: multipath
          in: query
          description: multireddit url path
        - name: srname
          in: query
          description: subreddit name
    put:
      operationId: 'PUT_api_filter_{filterpath}_r_{srname}'
      security:
        - redditOAuth:
            - subscribe
      description: Add a subreddit to a multi.
      tags:
        - multis
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: filterpath
          schema:
            type: string
        - in: path
          name: srname
          schema:
            type: string
        - name: model
          in: query
          description: 'json data: { "name": subreddit name, }'
        - name: multipath
          in: query
          description: multireddit url path
        - name: srname
          in: query
          description: subreddit name
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/r/{subreddit}/search{read}.json':
    get:
      operationId: GET_search
      security:
        - redditOAuth:
            - read
      description: |-
        Search links page. 
        This endpoint is a listing.
      tags:
        - search
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: category
          in: query
          description: a string no longer than 5 characters
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: include_facets
          in: query
          description: boolean value
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: q
          in: query
          description: a string no longer than 512 characters
        - name: restrict_sr
          in: query
          description: boolean value
        - name: show
          in: query
          description: (optional) the string all
        - name: sort
          in: query
          description: 'one of (relevance, hot, top, new, comments)'
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - name: t
          in: query
          description: 'one of (hour, day, week, month, year, all)'
        - name: type
          in: query
          description: '(optional) comma-delimited list of result types (sr, link, user)'
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: read
          schema:
            type: string
  '/r/{subreddit}/about/banned.json':
    get:
      operationId: GET_about_banned
      security: &ref_42
        - redditOAuth:
            - read
      description: This endpoint is a listing.
      tags: &ref_43
        - subreddits
      responses: &ref_44
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - &ref_45
          name: after
          in: query
          description: fullname of a thing
        - &ref_46
          name: before
          in: query
          description: fullname of a thing
        - &ref_47
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_48
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_49
          name: show
          in: query
          description: (optional) the string all
        - &ref_50
          name: sr_detail
          in: query
          description: (optional) expand subreddits
        - &ref_51
          name: user
          in: query
          description: 'A valid, existing reddit username'
  '/r/{subreddit}/about/muted.json':
    get:
      operationId: GET_about_muted
      security: *ref_42
      description: This endpoint is a listing.
      tags: *ref_43
      responses: *ref_44
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_45
        - *ref_46
        - *ref_47
        - *ref_48
        - *ref_49
        - *ref_50
        - *ref_51
  '/r/{subreddit}/about/wikibanned.json':
    get:
      operationId: GET_about_wikibanned
      security: *ref_42
      description: This endpoint is a listing.
      tags: *ref_43
      responses: *ref_44
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_45
        - *ref_46
        - *ref_47
        - *ref_48
        - *ref_49
        - *ref_50
        - *ref_51
  '/r/{subreddit}/about/contributors.json':
    get:
      operationId: GET_about_contributors
      security: *ref_42
      description: This endpoint is a listing.
      tags: *ref_43
      responses: *ref_44
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_45
        - *ref_46
        - *ref_47
        - *ref_48
        - *ref_49
        - *ref_50
        - *ref_51
  '/r/{subreddit}/about/wikicontributors.json':
    get:
      operationId: GET_about_wikicontributors
      security: *ref_42
      description: This endpoint is a listing.
      tags: *ref_43
      responses: *ref_44
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_45
        - *ref_46
        - *ref_47
        - *ref_48
        - *ref_49
        - *ref_50
        - *ref_51
  '/r/{subreddit}/about/moderators.json':
    get:
      operationId: GET_about_moderators
      security: *ref_42
      description: This endpoint is a listing.
      tags: *ref_43
      responses: *ref_44
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_45
        - *ref_46
        - *ref_47
        - *ref_48
        - *ref_49
        - *ref_50
        - *ref_51
  '/r/{subreddit}/api/delete_sr_banner.json':
    post:
      operationId: POST_api_delete_sr_banner
      security:
        - redditOAuth:
            - modconfig
      description: |-
        Remove the subreddit's custom mobile banner. 
        See also: /api/upload_sr_img.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/delete_sr_header.json':
    post:
      operationId: POST_api_delete_sr_header
      security:
        - redditOAuth:
            - modconfig
      description: |-
        Remove the subreddit's custom header image. 
        The sitewide-default header image will be shown again after this call. 
        See also: /api/upload_sr_img.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/delete_sr_icon.json':
    post:
      operationId: POST_api_delete_sr_icon
      security:
        - redditOAuth:
            - modconfig
      description: |-
        Remove the subreddit's custom mobile icon. 
        See also: /api/upload_sr_img.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/delete_sr_img.json':
    post:
      operationId: POST_api_delete_sr_img
      security:
        - redditOAuth:
            - modconfig
      description: >-
        Remove an image from the subreddit's custom image set. 

        The image will no longer count against the subreddit's image limit.
        However, the actual image data may still be accessible for an
        unspecified amount of time. If the image is currently referenced by the
        subreddit's stylesheet, that stylesheet will no longer validate and
        won't be editable until the image reference is removed. 

        See also: /api/upload_sr_img.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: img_name
          in: query
          description: a valid subreddit image name
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/api/recommend/sr/{srnames}.json':
    get:
      operationId: 'GET_api_recommend_sr_{srnames}'
      security:
        - redditOAuth:
            - read
      description: >-
        DEPRECATED: Return subreddits recommended for the given subreddit(s). 

        Gets a list of subreddits recommended for srnames, filtering out any
        that appear in the optional omit param.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: omit
          in: query
          description: comma-delimited list of subreddit names
        - name: over_18
          in: query
          description: boolean value
        - name: srnames
          in: query
          description: comma-delimited list of subreddit names
        - in: path
          name: srnames
          schema:
            type: string
  /api/search_reddit_names.json:
    get:
      operationId: GET_api_search_reddit_names
      security:
        - redditOAuth:
            - read
      description: >-
        List subreddit names that begin with a query string. 

        Subreddits whose names begin with query will be returned. If
        include_over_18 is false, subreddits with over-18 content restrictions
        will be filtered from the results. 

        If include_unadvertisable is False, subreddits that have hide_ads set to
        True or are on the anti_ads_subreddits list will be filtered. 

        If exact is true, only an exact match will be returned. Exact matches
        are inclusive of over_18 subreddits, but not hide_ad subreddits when
        include_unadvertisable is False.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: exact
          in: query
          description: boolean value
        - name: include_over_18
          in: query
          description: boolean value
        - name: include_unadvertisable
          in: query
          description: boolean value
        - name: query
          in: query
          description: >-
            a string up to 50 characters long, consisting of printable
            characters.
        - name: search_query_id
          in: query
          description: a uuid
        - name: typeahead_active
          in: query
          description: boolean value or None
    post:
      operationId: POST_api_search_reddit_names
      security:
        - redditOAuth:
            - read
      description: >-
        List subreddit names that begin with a query string. 

        Subreddits whose names begin with query will be returned. If
        include_over_18 is false, subreddits with over-18 content restrictions
        will be filtered from the results. 

        If include_unadvertisable is False, subreddits that have hide_ads set to
        True or are on the anti_ads_subreddits list will be filtered. 

        If exact is true, only an exact match will be returned. Exact matches
        are inclusive of over_18 subreddits, but not hide_ad subreddits when
        include_unadvertisable is False.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: exact
          in: query
          description: boolean value
        - name: include_over_18
          in: query
          description: boolean value
        - name: include_unadvertisable
          in: query
          description: boolean value
        - name: query
          in: query
          description: >-
            a string up to 50 characters long, consisting of printable
            characters.
        - name: search_query_id
          in: query
          description: a uuid
        - name: typeahead_active
          in: query
          description: boolean value or None
  /api/search_subreddits.json:
    post:
      operationId: POST_api_search_subreddits
      security:
        - redditOAuth:
            - read
      description: >-
        List subreddits that begin with a query string. 

        Subreddits whose names begin with query will be returned. If
        include_over_18 is false, subreddits with over-18 content restrictions
        will be filtered from the results. 

        If include_unadvertisable is False, subreddits that have hide_ads set to
        True or are on the anti_ads_subreddits list will be filtered. 

        If exact is true, only an exact match will be returned. Exact matches
        are inclusive of over_18 subreddits, but not hide_ad subreddits when
        include_unadvertisable is False.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: exact
          in: query
          description: boolean value
        - name: include_over_18
          in: query
          description: boolean value
        - name: include_unadvertisable
          in: query
          description: boolean value
        - name: query
          in: query
          description: >-
            a string up to 50 characters long, consisting of printable
            characters.
        - name: search_query_id
          in: query
          description: a uuid
        - name: typeahead_active
          in: query
          description: boolean value or None
  /api/site_admin.json:
    post:
      operationId: POST_api_site_admin
      security:
        - redditOAuth:
            - modconfig
      description: >-
        Create or configure a subreddit. 

        If sr is specified, the request will attempt to modify the specified
        subreddit. If not, a subreddit with name name will be created. 

        This endpoint expects all values to be supplied on every request. If
        modifying a subset of options, it may be useful to get the current
        settings from /about/edit.json first. 

        For backwards compatibility, description is the sidebar text and
        public_description is the publicly visible subreddit description. 

        Most of the parameters for this endpoint are identical to options
        visible in the user interface and their meanings are best explained
        there. 

        See also: /about/edit.json.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: accept_followers
          in: query
          description: boolean value
        - name: admin_override_spam_comments
          in: query
          description: boolean value
        - name: admin_override_spam_links
          in: query
          description: boolean value
        - name: admin_override_spam_selfposts
          in: query
          description: boolean value
        - name: all_original_content
          in: query
          description: boolean value
        - name: allow_chat_post_creation
          in: query
          description: boolean value
        - name: allow_discovery
          in: query
          description: boolean value
        - name: allow_galleries
          in: query
          description: boolean value
        - name: allow_images
          in: query
          description: boolean value
        - name: allow_polls
          in: query
          description: boolean value
        - name: allow_post_crossposts
          in: query
          description: boolean value
        - name: allow_prediction_contributors
          in: query
          description: boolean value
        - name: allow_predictions
          in: query
          description: boolean value
        - name: allow_predictions_tournament
          in: query
          description: boolean value
        - name: allow_talks
          in: query
          description: boolean value
        - name: allow_top
          in: query
          description: boolean value
        - name: allow_videos
          in: query
          description: boolean value
        - name: api_type
          in: query
          description: the string json
        - name: ban_evasion_threshold
          in: query
          description: an integer between 1 and 4
        - name: collapse_deleted_comments
          in: query
          description: boolean value
        - name: comment_contribution_settings
          in: query
          description: >-
            json data: { "allowed_media_types": [ one of (`giphy`, `unknown`,
            `animated`, `static`), ... ], }
        - name: comment_score_hide_mins
          in: query
          description: 'an integer between 0 and 1440 (default: 0)'
        - name: crowd_control_chat_level
          in: query
          description: an integer between 0 and 3
        - name: crowd_control_filter
          in: query
          description: boolean value
        - name: crowd_control_level
          in: query
          description: an integer between 0 and 3
        - name: crowd_control_mode
          in: query
          description: boolean value
        - name: crowd_control_post_level
          in: query
          description: an integer between 0 and 3
        - name: description
          in: query
          description: raw markdown text
        - name: disable_contributor_requests
          in: query
          description: boolean value
        - name: exclude_banned_modqueue
          in: query
          description: boolean value
        - name: free_form_reports
          in: query
          description: boolean value
        - name: g-recaptcha-response
          in: query
          description: ''
        - name: hateful_content_threshold_abuse
          in: query
          description: an integer between 0 and 3
        - name: hateful_content_threshold_identity
          in: query
          description: an integer between 0 and 3
        - name: header-title
          in: query
          description: a string no longer than 500 characters
        - name: hide_ads
          in: query
          description: boolean value
        - name: key_color
          in: query
          description: 'a 6-digit rgb hex color, e.g. #AABBCC'
        - name: link_type
          in: query
          description: 'one of (any, link, self)'
        - name: modmail_harassment_filter_enabled
          in: query
          description: boolean value
        - name: name
          in: query
          description: subreddit name
        - name: new_pinned_post_pns_enabled
          in: query
          description: boolean value
        - name: original_content_tag_enabled
          in: query
          description: boolean value
        - name: over_18
          in: query
          description: boolean value
        - name: prediction_leaderboard_entry_type
          in: query
          description: an integer between 0 and 2
        - name: public_description
          in: query
          description: raw markdown text
        - name: restrict_commenting
          in: query
          description: boolean value
        - name: restrict_posting
          in: query
          description: boolean value
        - name: should_archive_posts
          in: query
          description: boolean value
        - name: show_media
          in: query
          description: boolean value
        - name: show_media_preview
          in: query
          description: boolean value
        - name: spam_comments
          in: query
          description: 'one of (low, high, all)'
        - name: spam_links
          in: query
          description: 'one of (low, high, all)'
        - name: spam_selfposts
          in: query
          description: 'one of (low, high, all)'
        - name: spoilers_enabled
          in: query
          description: boolean value
        - name: sr
          in: query
          description: fullname of a thing
        - name: submit_link_label
          in: query
          description: a string no longer than 60 characters
        - name: submit_text
          in: query
          description: raw markdown text
        - name: submit_text_label
          in: query
          description: a string no longer than 60 characters
        - name: suggested_comment_sort
          in: query
          description: 'one of (confidence, top, new, controversial, old, random, qa, live)'
        - name: title
          in: query
          description: a string no longer than 100 characters
        - name: toxicity_threshold_chat_level
          in: query
          description: an integer between 0 and 1
        - name: type
          in: query
          description: >-
            one of (gold_restricted, archived, restricted, private,
            employees_only, gold_only, public, user)
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - name: user_flair_pns_enabled
          in: query
          description: boolean value
        - name: welcome_message_enabled
          in: query
          description: boolean value
        - name: welcome_message_text
          in: query
          description: raw markdown text
        - name: wiki_edit_age
          in: query
          description: 'an integer between 0 and 36600 (default: 0)'
        - name: wiki_edit_karma
          in: query
          description: 'an integer between 0 and 1000000000 (default: 0)'
        - name: wikimode
          in: query
          description: 'one of (disabled, modonly, anyone)'
  '/r/{subreddit}/api/submit_text.json':
    get:
      operationId: GET_api_submit_text
      security:
        - redditOAuth:
            - submit
      description: >-
        Get the submission text for the subreddit. 

        This text is set by the subreddit moderators and intended to be
        displayed on the submission form. 

        See also: /api/site_admin.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  /api/subreddit_autocomplete.json:
    get:
      operationId: GET_api_subreddit_autocomplete
      security:
        - redditOAuth:
            - read
      description: >-
        Return a list of subreddits and data for subreddits whose names start
        with 'query'. 

        Uses typeahead endpoint to recieve the list of subreddits names.
        Typeahead provides exact matches, typo correction, fuzzy matching and
        boosts subreddits to the top that the user is subscribed to.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: include_over_18
          in: query
          description: boolean value
        - name: include_profiles
          in: query
          description: boolean value
        - name: query
          in: query
          description: >-
            a string up to 25 characters long, consisting of printable
            characters.
  /api/subreddit_autocomplete_v2.json:
    get:
      operationId: GET_api_subreddit_autocomplete_v2
      security:
        - redditOAuth:
            - read
      description: ''
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: include_over_18
          in: query
          description: boolean value
        - name: include_profiles
          in: query
          description: boolean value
        - name: limit
          in: query
          description: 'an integer between 1 and 10 (default: 5)'
        - name: query
          in: query
          description: >-
            a string up to 25 characters long, consisting of printable
            characters.
        - name: search_query_id
          in: query
          description: a uuid
        - name: typeahead_active
          in: query
          description: boolean value or None
  '/r/{subreddit}/api/subreddit_stylesheet.json':
    post:
      operationId: POST_api_subreddit_stylesheet
      security:
        - redditOAuth:
            - modconfig
      description: |-
        Update a subreddit's stylesheet. 
        op should be save to update the contents of the stylesheet.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: op
          in: query
          description: 'one of (save, preview)'
        - name: reason
          in: query
          description: >-
            a string up to 256 characters long, consisting of printable
            characters.
        - name: stylesheet_contents
          in: query
          description: the new stylesheet content
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  /api/subscribe.json:
    post:
      operationId: POST_api_subscribe
      security:
        - redditOAuth:
            - subscribe
      description: >-
        Subscribe to or unsubscribe from a subreddit. 

        To subscribe, action should be sub. To unsubscribe, action should be
        unsub. The user must have access to the subreddit to be able to
        subscribe to it. 

        The skip_initial_defaults param can be set to True to prevent
        automatically subscribing the user to the current set of defaults when
        they take their first subscription action. Attempting to set it for an
        unsubscribe action will result in an error. 

        See also: /subreddits/mine/.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: action
          in: query
          description: 'one of (sub, unsub)'
        - name: action_source
          in: query
          description: 'one of (o, n, b, o, a, r, d, i, n, g)'
        - name: skip_initial_defaults
          in: query
          description: boolean value
        - name: sr / sr_name
          in: query
          description: >-
            A comma-separated list of subreddit fullnames (when using the "sr"
            parameter), or of subreddit names (when using the "sr_name"
            parameter).
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/r/{subreddit}/api/upload_sr_img.json':
    post:
      operationId: POST_api_upload_sr_img
      security:
        - redditOAuth:
            - modconfig
      description: >-
        Add or replace a subreddit image, custom header logo, custom mobile
        icon, or custom mobile banner. 
         
        If the upload_type value is img, an image for use in the subreddit
        stylesheet is uploaded with the name specified in name. 

        If the upload_type value is header then the image uploaded will be the
        subreddit's new logo and name will be ignored. 

        If the upload_type value is icon then the image uploaded will be the
        subreddit's new mobile icon and name will be ignored. 

        If the upload_type value is banner then the image uploaded will be the
        subreddit's new mobile banner and name will be ignored.  

        For backwards compatibility, if upload_type is not specified, the header
        field will be used instead: 
         
        If the header field has value 0, then upload_type is img. 

        If the header field has value 1, then upload_type is header.  

        The img_type field specifies whether to store the uploaded image as a
        PNG or JPEG. 

        Subreddits have a limited number of images that can be in use at any
        given time. If no image with the specified name already exists, one of
        the slots will be consumed. 

        If an image with the specified name already exists, it will be replaced.
        This does not affect the stylesheet immediately, but will take effect
        the next time the stylesheet is saved. 

        See also: /api/delete_sr_img, /api/delete_sr_header,
        /api/delete_sr_icon, and /api/delete_sr_banner.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: file
          in: query
          description: file upload with maximum size of 500 KiB
        - name: formid
          in: query
          description: (optional) can be ignored
        - name: header
          in: query
          description: an integer between 0 and 1
        - name: img_type
          in: query
          description: 'one of png or jpg (default: png)'
        - name: name
          in: query
          description: a valid subreddit image name
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - name: upload_type
          in: query
          description: 'one of (img, header, icon, banner)'
        - in: path
          name: subreddit
          schema:
            type: string
  '/api/v1/{subreddit}/post_requirements.json':
    get:
      operationId: 'GET_api_v1_{subreddit}_post_requirements'
      security:
        - redditOAuth:
            - submit
      description: >-
        Fetch moderator-designated requirements to post to the subreddit. 

        Moderators may enable certain restrictions, such as minimum title
        length, when making a submission to their subreddit. 

        Clients may use the values returned by this endpoint to pre-validate
        fields before making a request to POST /api/submit. This may allow the
        client to provide a better user experience to the user, for example by
        creating a text field in their app that does not allow the user to enter
        more characters than the max title length. 

        A non-exhaustive list of possible requirements a moderator may enable: 
         
        body_blacklisted_strings: List of strings. Users may not submit posts
        that contain these words. 

        body_restriction_policy: String. One of "required", "notAllowed", or
        "none", meaning that a self-post body is required, not allowed, or
        optional, respectively. 

        domain_blacklist: List of strings. Users may not submit links to these
        domains 

        domain_whitelist: List of strings. Users submissions MUST be from one of
        these domains 

        is_flair_required: Boolean. If True, flair must be set at submission
        time. 

        title_blacklisted_strings: List of strings. Submission titles may NOT
        contain any of the listed strings. 

        title_required_strings: List of strings. Submission title MUST contain
        at least ONE of the listed strings. 

        title_text_max_length: Integer. Maximum length of the title field. 

        title_text_min_length: Integer. Minimum length of the title field.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/about.json':
    get:
      operationId: 'GET_r_{subreddit}_about'
      security:
        - redditOAuth:
            - read
      description: |-
        Return information about the subreddit. 
        Data includes the subscriber count, description, and header image.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/about/edit.json':
    get:
      operationId: 'GET_r_{subreddit}_about_edit'
      security:
        - redditOAuth:
            - modconfig
      description: >-
        Get the current settings of a subreddit. 

        In the API, this returns the current settings of the subreddit as used
        by /api/site_admin. On the HTML site, it will display a form for editing
        the subreddit.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: created
          in: query
          description: 'one of (true, false)'
        - name: location
          in: query
          description: ''
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/about/rules.json':
    get:
      operationId: 'GET_r_{subreddit}_about_rules'
      security:
        - redditOAuth:
            - read
      description: Get the rules for the current subreddit
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/about/traffic.json':
    get:
      operationId: 'GET_r_{subreddit}_about_traffic'
      security:
        - redditOAuth:
            - modconfig
      description: ''
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/sidebar.json':
    get:
      operationId: GET_sidebar
      security:
        - redditOAuth:
            - read
      description: Get the sidebar for the current subreddit
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/sticky.json':
    get:
      operationId: GET_sticky
      security:
        - redditOAuth:
            - read
      description: >-
        Redirect to one of the posts stickied in the current subreddit 

        The "num" argument can be used to select a specific sticky, and will
        default to 1 (the top sticky) if not specified. Will 404 if there is not
        currently a sticky post in this subreddit.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: num
          in: query
          description: 'an integer between 1 and 2 (default: 1)'
        - in: path
          name: subreddit
          schema:
            type: string
  /subreddits/mine/subscriber.json:
    get:
      operationId: GET_subreddits_mine_subscriber
      security: &ref_52
        - redditOAuth:
            - mysubreddits
      description: >-
        Get subreddits the user has a relationship with. 

        The where parameter chooses which subreddits are returned as follows: 
         
        subscriber - subreddits the user is subscribed to 

        contributor - subreddits the user is an approved user in 

        moderator - subreddits the user is a moderator of 

        streams - subscribed to subreddits that contain hosted video links  

        See also: /api/subscribe, /api/friend, and
        /api/accept_moderator_invite. 

        This endpoint is a listing.
      tags: &ref_53
        - subreddits
      responses: &ref_54
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - &ref_55
          name: after
          in: query
          description: fullname of a thing
        - &ref_56
          name: before
          in: query
          description: fullname of a thing
        - &ref_57
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_58
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_59
          name: show
          in: query
          description: (optional) the string all
        - &ref_60
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  /subreddits/mine/contributor.json:
    get:
      operationId: GET_subreddits_mine_contributor
      security: *ref_52
      description: >-
        Get subreddits the user has a relationship with. 

        The where parameter chooses which subreddits are returned as follows: 
         
        subscriber - subreddits the user is subscribed to 

        contributor - subreddits the user is an approved user in 

        moderator - subreddits the user is a moderator of 

        streams - subscribed to subreddits that contain hosted video links  

        See also: /api/subscribe, /api/friend, and
        /api/accept_moderator_invite. 

        This endpoint is a listing.
      tags: *ref_53
      responses: *ref_54
      parameters:
        - *ref_55
        - *ref_56
        - *ref_57
        - *ref_58
        - *ref_59
        - *ref_60
  /subreddits/mine/moderator.json:
    get:
      operationId: GET_subreddits_mine_moderator
      security: *ref_52
      description: >-
        Get subreddits the user has a relationship with. 

        The where parameter chooses which subreddits are returned as follows: 
         
        subscriber - subreddits the user is subscribed to 

        contributor - subreddits the user is an approved user in 

        moderator - subreddits the user is a moderator of 

        streams - subscribed to subreddits that contain hosted video links  

        See also: /api/subscribe, /api/friend, and
        /api/accept_moderator_invite. 

        This endpoint is a listing.
      tags: *ref_53
      responses: *ref_54
      parameters:
        - *ref_55
        - *ref_56
        - *ref_57
        - *ref_58
        - *ref_59
        - *ref_60
  /subreddits/mine/streams.json:
    get:
      operationId: GET_subreddits_mine_streams
      security: *ref_52
      description: >-
        Get subreddits the user has a relationship with. 

        The where parameter chooses which subreddits are returned as follows: 
         
        subscriber - subreddits the user is subscribed to 

        contributor - subreddits the user is an approved user in 

        moderator - subreddits the user is a moderator of 

        streams - subscribed to subreddits that contain hosted video links  

        See also: /api/subscribe, /api/friend, and
        /api/accept_moderator_invite. 

        This endpoint is a listing.
      tags: *ref_53
      responses: *ref_54
      parameters:
        - *ref_55
        - *ref_56
        - *ref_57
        - *ref_58
        - *ref_59
        - *ref_60
  '/subreddits/search{read}.json':
    get:
      operationId: GET_subreddits_search
      security:
        - redditOAuth:
            - read
      description: |-
        Search subreddits by title and description. 
        This endpoint is a listing.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: q
          in: query
          description: a search query
        - name: search_query_id
          in: query
          description: a uuid
        - name: show
          in: query
          description: (optional) the string all
        - name: show_users
          in: query
          description: boolean value
        - name: sort
          in: query
          description: 'one of (relevance, activity)'
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - name: typeahead_active
          in: query
          description: boolean value or None
        - in: path
          name: read
          schema:
            type: string
  /subreddits/popular.json:
    get:
      operationId: GET_subreddits_popular
      security: &ref_61
        - redditOAuth:
            - read
      description: >-
        Get all subreddits. 

        The where parameter chooses the order in which the subreddits are
        displayed. popular sorts on the activity of the subreddit and the
        position of the subreddits can shift around. new sorts the subreddits
        based on their creation date, newest first. 

        This endpoint is a listing.
      tags: &ref_62
        - subreddits
      responses: &ref_63
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - &ref_64
          name: after
          in: query
          description: fullname of a thing
        - &ref_65
          name: before
          in: query
          description: fullname of a thing
        - &ref_66
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_67
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_68
          name: show
          in: query
          description: (optional) the string all
        - &ref_69
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  /subreddits/new.json:
    get:
      operationId: GET_subreddits_new
      security: *ref_61
      description: >-
        Get all subreddits. 

        The where parameter chooses the order in which the subreddits are
        displayed. popular sorts on the activity of the subreddit and the
        position of the subreddits can shift around. new sorts the subreddits
        based on their creation date, newest first. 

        This endpoint is a listing.
      tags: *ref_62
      responses: *ref_63
      parameters:
        - *ref_64
        - *ref_65
        - *ref_66
        - *ref_67
        - *ref_68
        - *ref_69
  /subreddits/gold.json:
    get:
      operationId: GET_subreddits_gold
      security: *ref_61
      description: >-
        Get all subreddits. 

        The where parameter chooses the order in which the subreddits are
        displayed. popular sorts on the activity of the subreddit and the
        position of the subreddits can shift around. new sorts the subreddits
        based on their creation date, newest first. 

        This endpoint is a listing.
      tags: *ref_62
      responses: *ref_63
      parameters:
        - *ref_64
        - *ref_65
        - *ref_66
        - *ref_67
        - *ref_68
        - *ref_69
  /subreddits/default.json:
    get:
      operationId: GET_subreddits_default
      security: *ref_61
      description: >-
        Get all subreddits. 

        The where parameter chooses the order in which the subreddits are
        displayed. popular sorts on the activity of the subreddit and the
        position of the subreddits can shift around. new sorts the subreddits
        based on their creation date, newest first. 

        This endpoint is a listing.
      tags: *ref_62
      responses: *ref_63
      parameters:
        - *ref_64
        - *ref_65
        - *ref_66
        - *ref_67
        - *ref_68
        - *ref_69
  '/users/search{read}.json':
    get:
      operationId: GET_users_search
      security:
        - redditOAuth:
            - read
      description: |-
        Search user profiles by title and description. 
        This endpoint is a listing.
      tags:
        - subreddits
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: q
          in: query
          description: a search query
        - name: search_query_id
          in: query
          description: a uuid
        - name: show
          in: query
          description: (optional) the string all
        - name: sort
          in: query
          description: 'one of (relevance, activity)'
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - name: typeahead_active
          in: query
          description: boolean value or None
        - in: path
          name: read
          schema:
            type: string
  /users/popular.json:
    get:
      operationId: GET_users_popular
      security: &ref_70
        - redditOAuth:
            - read
      description: >-
        Get all user subreddits. 

        The where parameter chooses the order in which the subreddits are
        displayed. popular sorts on the activity of the subreddit and the
        position of the subreddits can shift around. new sorts the user
        subreddits based on their creation date, newest first. 

        This endpoint is a listing.
      tags: &ref_71
        - subreddits
      responses: &ref_72
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - &ref_73
          name: after
          in: query
          description: fullname of a thing
        - &ref_74
          name: before
          in: query
          description: fullname of a thing
        - &ref_75
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_76
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_77
          name: show
          in: query
          description: (optional) the string all
        - &ref_78
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  /users/new.json:
    get:
      operationId: GET_users_new
      security: *ref_70
      description: >-
        Get all user subreddits. 

        The where parameter chooses the order in which the subreddits are
        displayed. popular sorts on the activity of the subreddit and the
        position of the subreddits can shift around. new sorts the user
        subreddits based on their creation date, newest first. 

        This endpoint is a listing.
      tags: *ref_71
      responses: *ref_72
      parameters:
        - *ref_73
        - *ref_74
        - *ref_75
        - *ref_76
        - *ref_77
        - *ref_78
  /api/block_user.json:
    post:
      operationId: POST_api_block_user
      security:
        - redditOAuth:
            - account
      description: For blocking a user.
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: account_id
          in: query
          description: fullname of a account
        - name: api_type
          in: query
          description: the string json
        - name: name
          in: query
          description: 'A valid, existing reddit username'
        - name: uh / X-Modhash header
          in: query
          description: a modhash
  '/r/{subreddit}/api/friend.json':
    post:
      operationId: POST_api_friend
      security:
        - redditOAuth:
            - any
      description: >-
        Create a relationship between a user and another user or subreddit 

        OAuth2 use requires appropriate scope based on the 'type' of the
        relationship: 
         
        moderator: Use "moderator_invite" 

        moderator_invite: modothers 

        contributor: modcontributors 

        banned: modcontributors 

        muted: modcontributors 

        wikibanned: modcontributors and modwiki 

        wikicontributor: modcontributors and modwiki 

        friend: Use /api/v1/me/friends/{username} 

        enemy: Use /api/block  

        Complement to POST_unfriend
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: ban_context
          in: query
          description: fullname of a thing
        - name: ban_message
          in: query
          description: raw markdown text
        - name: ban_reason
          in: query
          description: a string no longer than 100 characters
        - name: container
          in: query
          description: ''
        - name: duration
          in: query
          description: an integer between 1 and 999
        - name: name
          in: query
          description: the name of an existing user
        - name: note
          in: query
          description: a string no longer than 300 characters
        - name: permissions
          in: query
          description: ''
        - name: type
          in: query
          description: >-
            one of (friend, moderator, moderator_invite, contributor, banned,
            muted, wikibanned, wikicontributor)
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  /api/report_user.json:
    post:
      operationId: POST_api_report_user
      security:
        - redditOAuth:
            - report
      description: >-
        Report a user. Reporting a user brings it to the attention of a Reddit
        admin.
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: details
          in: query
          description: JSON data
        - name: reason
          in: query
          description: a string no longer than 100 characters
        - name: '(''user'',)'
          in: query
          description: 'A valid, existing reddit username'
  '/r/{subreddit}/api/setpermissions.json':
    post:
      operationId: POST_api_setpermissions
      security:
        - redditOAuth:
            - modothers
      description: ''
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: api_type
          in: query
          description: the string json
        - name: name
          in: query
          description: the name of an existing user
        - name: permissions
          in: query
          description: ''
        - name: type
          in: query
          description: ''
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/unfriend.json':
    post:
      operationId: POST_api_unfriend
      security:
        - redditOAuth:
            - any
      description: >-
        Remove a relationship between a user and another user or subreddit 

        The user can either be passed in by name (nuser) or by fullname (iuser).
        If type is friend or enemy, 'container' MUST be the current user's
        fullname; for other types, the subreddit must be set via URL (e.g.,
        /r/funny/api/unfriend) 

        OAuth2 use requires appropriate scope based on the 'type' of the
        relationship: 
         
        moderator: modothers 

        moderator_invite: modothers 

        contributor: modcontributors 

        banned: modcontributors 

        muted: modcontributors 

        wikibanned: modcontributors and modwiki 

        wikicontributor: modcontributors and modwiki 

        friend: Use /api/v1/me/friends/{username} 

        enemy: privatemessages  

        Complement to POST_friend
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: container
          in: query
          description: ''
        - name: id
          in: query
          description: fullname of a thing
        - name: name
          in: query
          description: the name of an existing user
        - name: type
          in: query
          description: >-
            one of (friend, enemy, moderator, moderator_invite, contributor,
            banned, muted, wikibanned, wikicontributor)
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  /api/user_data_by_account_ids.json:
    get:
      operationId: GET_api_user_data_by_account_ids
      security:
        - redditOAuth:
            - privatemessages
      description: ''
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of account fullnames
  /api/username_available.json:
    get:
      operationId: GET_api_username_available
      security:
        - redditOAuth:
            - any
      description: Check whether a username is available for registration.
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: user
          in: query
          description: 'a valid, unused, username'
  '/api/v1/me/friends/{username}.json':
    delete:
      operationId: 'DELETE_api_v1_me_friends_{username}'
      security:
        - redditOAuth:
            - subscribe
      description: Stop being friends with a user.
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: 'A valid, existing reddit username'
        - in: path
          name: username
          schema:
            type: string
    get:
      operationId: 'GET_api_v1_me_friends_{username}'
      security:
        - redditOAuth:
            - mysubreddits
      description: 'Get information about a specific ''friend'', such as notes.'
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: 'A valid, existing reddit username'
        - in: path
          name: username
          schema:
            type: string
    put:
      operationId: 'PUT_api_v1_me_friends_{username}'
      security:
        - redditOAuth:
            - subscribe
      description: >-
        Create or update a "friend" relationship. 

        This operation is idempotent. It can be used to add a new friend, or
        update an existing friend (e.g., add/change the note on that friend)
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: username
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
              description: >-
                { "name": A valid, existing reddit username, "note": a string no
                longer than 300 characters, }
  '/api/v1/user/{username}/trophies.json':
    get:
      operationId: 'GET_api_v1_user_{username}_trophies'
      security:
        - redditOAuth:
            - read
      description: Return a list of trophies for the a given user.
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: id
          in: query
          description: 'A valid, existing reddit username'
        - in: path
          name: username
          schema:
            type: string
  '/user/{username}/about.json':
    get:
      operationId: 'GET_user_{username}_about'
      security:
        - redditOAuth:
            - read
      description: 'Return information about the user, including karma and gold status.'
      tags:
        - users
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: username
          in: query
          description: the name of an existing user
        - in: path
          name: username
          schema:
            type: string
  '/user/{username}/overview.json':
    get:
      operationId: 'GET_user_{username}_overview'
      security: &ref_79
        - redditOAuth:
            - history
      description: This endpoint is a listing.
      tags: &ref_80
        - users
      responses: &ref_81
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - &ref_82
          name: context
          in: query
          description: an integer between 2 and 10
        - &ref_83
          name: show
          in: query
          description: one of (given)
        - &ref_84
          name: sort
          in: query
          description: 'one of (hot, new, top, controversial)'
        - &ref_85
          name: t
          in: query
          description: 'one of (hour, day, week, month, year, all)'
        - &ref_86
          name: type
          in: query
          description: 'one of (links, comments)'
        - &ref_87
          name: username
          in: query
          description: the name of an existing user
        - &ref_88
          name: after
          in: query
          description: fullname of a thing
        - &ref_89
          name: before
          in: query
          description: fullname of a thing
        - &ref_90
          name: count
          in: query
          description: 'a positive integer (default: 0)'
        - &ref_91
          name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - &ref_92
          name: sr_detail
          in: query
          description: (optional) expand subreddits
  '/user/{username}/submitted.json':
    get:
      operationId: 'GET_user_{username}_submitted'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/user/{username}/comments.json':
    get:
      operationId: 'GET_user_{username}_comments'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/user/{username}/upvoted.json':
    get:
      operationId: 'GET_user_{username}_upvoted'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/user/{username}/downvoted.json':
    get:
      operationId: 'GET_user_{username}_downvoted'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/user/{username}/hidden.json':
    get:
      operationId: 'GET_user_{username}_hidden'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/user/{username}/saved.json':
    get:
      operationId: 'GET_user_{username}_saved'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/user/{username}/gilded.json':
    get:
      operationId: 'GET_user_{username}_gilded'
      security: *ref_79
      description: This endpoint is a listing.
      tags: *ref_80
      responses: *ref_81
      parameters:
        - in: path
          name: username
          schema:
            type: string
        - *ref_82
        - *ref_83
        - *ref_84
        - *ref_85
        - *ref_86
        - *ref_87
        - *ref_88
        - *ref_89
        - *ref_90
        - *ref_91
        - *ref_92
  '/r/{subreddit}/api/widget.json':
    post:
      operationId: POST_api_widget
      security:
        - redditOAuth:
            - structuredstyles
      description: >-
        Add and return a widget to the specified subreddit 

        Accepts a JSON payload representing the widget data to be saved. Valid
        payloads differ in shape based on the "kind" attribute passed on the
        root object, which must be a valid widget kind.
      tags:
        - widgets
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: json
          in: query
          description: >-
            json data: { "data": [ { "height": an integer, "linkUrl": A valid
            URL (optional), "url": a valid URL of a reddit-hosted image,
            "width": an integer, }, ... ], "kind": one of (`image`),
            "shortName": a string no longer than 30 characters, "styles": {
            "backgroundColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`, }, } OR {
            "configuration": { "numEvents": an integer between 1 and 50
            (default: 10), "showDate": boolean value, "showDescription": boolean
            value, "showLocation": boolean value, "showTime": boolean value,
            "showTitle": boolean value, }, "googleCalendarId": a valid email
            address, "kind": one of (`calendar`), "requiresSync": boolean value,
            "shortName": a string no longer than 30 characters, "styles": {
            "backgroundColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`, }, } OR {
            "kind": one of (`textarea`), "shortName": a string no longer than 30
            characters, "styles": { "backgroundColor": a 6-digit rgb hex color,
            e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, }, "text": raw markdown text, } OR { "data": [ { "text":
            a string no longer than 20 characters, "url": a valid URL, } OR {
            "children": [ { "text": a string no longer than 20 characters,
            "url": a valid URL, }, ... ], "text": a string no longer than 20
            characters, }, ... ], "kind": one of (`menu`), "showWiki": boolean
            value, } OR { "buttons": [ { "color": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "fillColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "hoverState": { "color": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "fillColor": a 6-digit rgb hex color, e.g. `#AABBCC`, "kind": one of
            (`text`), "text": a string no longer than 30 characters,
            "textColor": a 6-digit rgb hex color, e.g. `#AABBCC`, } OR {
            "height": an integer, "imageUrl": a valid URL of a reddit-hosted
            image, "kind": one of (`image`), "width": an integer, }, "kind": one
            of (`text`), "text": a string no longer than 30 characters,
            "textColor": a 6-digit rgb hex color, e.g. `#AABBCC`, "url": a valid
            URL, } OR { "height": an integer, "hoverState": { "color": a 6-digit
            rgb hex color, e.g. `#AABBCC`, "fillColor": a 6-digit rgb hex color,
            e.g. `#AABBCC`, "kind": one of (`text`), "text": a string no longer
            than 30 characters, "textColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, } OR { "height": an integer, "imageUrl": a valid URL of a
            reddit-hosted image, "kind": one of (`image`), "width": an integer,
            }, "imageUrl": a valid URL of a reddit-hosted image, "kind": one of
            (`image`), "linkUrl": a valid URL, "text": a string no longer than
            30 characters, "width": an integer, }, ... ], "description": raw
            markdown text, "kind": one of (`button`), "shortName": a string no
            longer than 30 characters, "styles": { "backgroundColor": a 6-digit
            rgb hex color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex
            color, e.g. `#AABBCC`, }, } OR { "data": [ subreddit name, ... ],
            "kind": one of (`community-list`), "shortName": a string no longer
            than 30 characters, "styles": { "backgroundColor": a 6-digit rgb hex
            color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, }, } OR { "css": a string no longer than 100000
            characters, "height": an integer between 50 and 500, "imageData": [
            { "height": an integer, "name": a string no longer than 20
            characters, "url": a valid URL of a reddit-hosted image, "width": an
            integer, }, ... ], "kind": one of (`custom`), "shortName": a string
            no longer than 30 characters, "styles": { "backgroundColor": a
            6-digit rgb hex color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb
            hex color, e.g. `#AABBCC`, }, "text": raw markdown text, } OR {
            "display": one of (`cloud`, `list`), "kind": one of (`post-flair`),
            "order": [ a flair template ID, ... ], "shortName": a string no
            longer than 30 characters, "styles": { "backgroundColor": a 6-digit
            rgb hex color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex
            color, e.g. `#AABBCC`, }, }
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/widget/{widget_id}.json':
    delete:
      operationId: 'DELETE_api_widget_{widget_id}'
      security:
        - redditOAuth:
            - structuredstyles
      description: Delete a widget from the specified subreddit (if it exists)
      tags:
        - widgets
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: widget_id
          in: query
          description: id of an existing widget
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: widget_id
          schema:
            type: string
    put:
      operationId: 'PUT_api_widget_{widget_id}'
      security:
        - redditOAuth:
            - structuredstyles
      description: >-
        Update and return the data of a widget. 

        Accepts a JSON payload representing the widget data to be saved. Valid
        payloads differ in shape based on the "kind" attribute passed on the
        root object, which must be a valid widget kind.
      tags:
        - widgets
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: json
          in: query
          description: >-
            json data: { "data": [ { "height": an integer, "linkUrl": A valid
            URL (optional), "url": a valid URL of a reddit-hosted image,
            "width": an integer, }, ... ], "kind": one of (`image`),
            "shortName": a string no longer than 30 characters, "styles": {
            "backgroundColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`, }, } OR {
            "configuration": { "numEvents": an integer between 1 and 50
            (default: 10), "showDate": boolean value, "showDescription": boolean
            value, "showLocation": boolean value, "showTime": boolean value,
            "showTitle": boolean value, }, "googleCalendarId": a valid email
            address, "kind": one of (`calendar`), "requiresSync": boolean value,
            "shortName": a string no longer than 30 characters, "styles": {
            "backgroundColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`, }, } OR {
            "kind": one of (`textarea`), "shortName": a string no longer than 30
            characters, "styles": { "backgroundColor": a 6-digit rgb hex color,
            e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, }, "text": raw markdown text, } OR { "display": one of
            (`full`, `compact`), "kind": one of (`subreddit-rules`),
            "shortName": a string no longer than 30 characters, "styles": {
            "backgroundColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`, }, } OR {
            "data": [ { "text": a string no longer than 20 characters, "url": a
            valid URL, } OR { "children": [ { "text": a string no longer than 20
            characters, "url": a valid URL, }, ... ], "text": a string no longer
            than 20 characters, }, ... ], "kind": one of (`menu`), "showWiki":
            boolean value, } OR { "buttons": [ { "color": a 6-digit rgb hex
            color, e.g. `#AABBCC`, "fillColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "hoverState": { "color": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "fillColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "kind": one of (`text`), "text": a string no longer than 30
            characters, "textColor": a 6-digit rgb hex color, e.g. `#AABBCC`, }
            OR { "height": an integer, "imageUrl": a valid URL of a
            reddit-hosted image, "kind": one of (`image`), "width": an integer,
            }, "kind": one of (`text`), "text": a string no longer than 30
            characters, "textColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            "url": a valid URL, } OR { "height": an integer, "hoverState": {
            "color": a 6-digit rgb hex color, e.g. `#AABBCC`, "fillColor": a
            6-digit rgb hex color, e.g. `#AABBCC`, "kind": one of (`text`),
            "text": a string no longer than 30 characters, "textColor": a
            6-digit rgb hex color, e.g. `#AABBCC`, } OR { "height": an integer,
            "imageUrl": a valid URL of a reddit-hosted image, "kind": one of
            (`image`), "width": an integer, }, "imageUrl": a valid URL of a
            reddit-hosted image, "kind": one of (`image`), "linkUrl": a valid
            URL, "text": a string no longer than 30 characters, "width": an
            integer, }, ... ], "description": raw markdown text, "kind": one of
            (`button`), "shortName": a string no longer than 30 characters,
            "styles": { "backgroundColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            }, } OR { "currentlyViewingText": a string no longer than 30
            characters, "kind": one of (`id-card`), "shortName": a string no
            longer than 30 characters, "styles": { "backgroundColor": a 6-digit
            rgb hex color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex
            color, e.g. `#AABBCC`, }, "subscribersText": a string no longer than
            30 characters, } OR { "data": [ subreddit name, ... ], "kind": one
            of (`community-list`), "shortName": a string no longer than 30
            characters, "styles": { "backgroundColor": a 6-digit rgb hex color,
            e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, }, } OR { "css": a string no longer than 100000
            characters, "height": an integer between 50 and 500, "imageData": [
            { "height": an integer, "name": a string no longer than 20
            characters, "url": a valid URL of a reddit-hosted image, "width": an
            integer, }, ... ], "kind": one of (`custom`), "shortName": a string
            no longer than 30 characters, "styles": { "backgroundColor": a
            6-digit rgb hex color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb
            hex color, e.g. `#AABBCC`, }, "text": raw markdown text, } OR {
            "display": one of (`cloud`, `list`), "kind": one of (`post-flair`),
            "order": [ a flair template ID, ... ], "shortName": a string no
            longer than 30 characters, "styles": { "backgroundColor": a 6-digit
            rgb hex color, e.g. `#AABBCC`, "headerColor": a 6-digit rgb hex
            color, e.g. `#AABBCC`, }, } OR { "kind": one of (`moderators`),
            "styles": { "backgroundColor": a 6-digit rgb hex color, e.g.
            `#AABBCC`, "headerColor": a 6-digit rgb hex color, e.g. `#AABBCC`,
            }, }
        - name: widget_id
          in: query
          description: a valid widget id
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: widget_id
          schema:
            type: string
  '/r/{subreddit}/api/widget_image_upload_s3.json':
    post:
      operationId: POST_api_widget_image_upload_s3
      security:
        - redditOAuth:
            - structuredstyles
      description: >-
        Acquire and return an upload lease to s3 temp bucket. 

        The return value of this function is a json object containing
        credentials for uploading assets to S3 bucket, S3 url for upload request
        and the key to use for uploading. Using this lease the client will
        upload the emoji image to S3 temp bucket (included as part of the S3
        URL). 

        This lease is used by S3 to verify that the upload is authorized.
      tags:
        - widgets
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: filepath
          in: query
          description: name and extension of the image file e.g. image1.png
        - name: mimetype
          in: query
          description: mime type of the image e.g. image/png
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/widget_order/{section}.json':
    patch:
      operationId: 'PATCH_api_widget_order_{section}'
      security:
        - redditOAuth:
            - structuredstyles
      description: Update the order of widget_ids in the specified subreddit
      tags:
        - widgets
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: json
          in: query
          description: 'json data: [ a string, ... ]'
        - name: section
          in: query
          description: one of (sidebar)
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: section
          schema:
            type: string
  '/r/{subreddit}/api/widgets.json':
    get:
      operationId: GET_api_widgets
      security:
        - redditOAuth:
            - structuredstyles
      description: Return all widgets for the given subreddit
      tags:
        - widgets
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: progressive_images
          in: query
          description: boolean value
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/wiki/alloweditor/del.json':
    post:
      operationId: POST_api_wiki_alloweditor_del
      security: &ref_93
        - redditOAuth:
            - modwiki
      description: Allow/deny username to edit this wiki page
      tags: &ref_94
        - wiki
      responses: &ref_95
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - &ref_96
          name: act
          in: query
          description: 'one of (del, add)'
        - &ref_97
          name: page
          in: query
          description: the name of an existing wiki page
        - &ref_98
          name: uh / X-Modhash header
          in: query
          description: a modhash
        - &ref_99
          name: username
          in: query
          description: the name of an existing user
  '/r/{subreddit}/api/wiki/alloweditor/add.json':
    post:
      operationId: POST_api_wiki_alloweditor_add
      security: *ref_93
      description: Allow/deny username to edit this wiki page
      tags: *ref_94
      responses: *ref_95
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
        - *ref_96
        - *ref_97
        - *ref_98
        - *ref_99
  '/r/{subreddit}/api/wiki/edit.json':
    post:
      operationId: POST_api_wiki_edit
      security:
        - redditOAuth:
            - wikiedit
      description: Edit a wiki page
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: content
          in: query
          description: ''
        - name: page
          in: query
          description: the name of an existing page or a new page to create
        - name: previous
          in: query
          description: the starting point revision for this edit
        - name: reason
          in: query
          description: >-
            a string up to 256 characters long, consisting of printable
            characters.
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/wiki/hide.json':
    post:
      operationId: POST_api_wiki_hide
      security:
        - redditOAuth:
            - modwiki
      description: Toggle the public visibility of a wiki page revision
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: page
          in: query
          description: the name of an existing wiki page
        - name: revision
          in: query
          description: a wiki revision ID
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/api/wiki/revert.json':
    post:
      operationId: POST_api_wiki_revert
      security:
        - redditOAuth:
            - modwiki
      description: Revert a wiki page to revision
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: page
          in: query
          description: the name of an existing wiki page
        - name: revision
          in: query
          description: a wiki revision ID
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/wiki/discussions/{page}.json':
    get:
      operationId: 'GET_wiki_discussions_{page}'
      security:
        - redditOAuth:
            - wikiread
      description: |-
        Retrieve a list of discussions about this wiki page 
        This endpoint is a listing.
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: page
          in: query
          description: the name of an existing wiki page
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: page
          schema:
            type: string
  '/r/{subreddit}/wiki/pages.json':
    get:
      operationId: GET_wiki_pages
      security:
        - redditOAuth:
            - wikiread
      description: Retrieve a list of wiki pages in this subreddit
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/wiki/revisions.json':
    get:
      operationId: GET_wiki_revisions
      security:
        - redditOAuth:
            - wikiread
      description: Retrieve a list of recently changed wiki pages in this subreddit
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
  '/r/{subreddit}/wiki/revisions/{page}.json':
    get:
      operationId: 'GET_wiki_revisions_{page}'
      security:
        - redditOAuth:
            - wikiread
      description: |-
        Retrieve a list of revisions of this wiki page 
        This endpoint is a listing.
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: after
          in: query
          description: fullname of a thing
        - name: before
          in: query
          description: fullname of a thing
        - name: count
          in: query
          description: 'a positive integer (default: 0)'
        - name: limit
          in: query
          description: 'the maximum number of items desired (default: 25, maximum: 100)'
        - name: page
          in: query
          description: the name of an existing wiki page
        - name: show
          in: query
          description: (optional) the string all
        - name: sr_detail
          in: query
          description: (optional) expand subreddits
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: page
          schema:
            type: string
  '/r/{subreddit}/wiki/settings/{page}.json':
    get:
      operationId: 'GET_wiki_settings_{page}'
      security:
        - redditOAuth:
            - modwiki
      description: Retrieve the current permission settings for page
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: page
          in: query
          description: the name of an existing wiki page
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: page
          schema:
            type: string
    post:
      operationId: 'POST_wiki_settings_{page}'
      security:
        - redditOAuth:
            - modwiki
      description: Update the permissions and visibility of wiki page
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: listed
          in: query
          description: boolean value
        - name: page
          in: query
          description: the name of an existing wiki page
        - name: permlevel
          in: query
          description: an integer
        - name: uh / X-Modhash header
          in: query
          description: a modhash
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: page
          schema:
            type: string
  '/r/{subreddit}/wiki/{page}.json':
    get:
      operationId: 'GET_wiki_{page}'
      security:
        - redditOAuth:
            - wikiread
      description: >-
        Return the content of a wiki page 

        If v is given, show the wiki page as it was at that version If both v
        and v2 are given, show a diff of the two
      tags:
        - wiki
      responses:
        '200':
          description: TODO
          content:
            application/json: {}
      parameters:
        - name: page
          in: query
          description: the name of an existing wiki page
        - name: v
          in: query
          description: a wiki revision ID
        - name: v2
          in: query
          description: a wiki revision ID
        - in: path
          name: subreddit
          schema:
            type: string
        - in: path
          name: page
          schema:
            type: string

